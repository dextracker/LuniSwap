{"ast":null,"code":"var _jsxFileName = \"/home/devpc/LoonySwap/uniswap-interface/src/components/Order/luniTransaction.tsx\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { darken } from 'polished';\nimport { ButtonRed } from '../../components/Button'; // import { useOrderListContract, useLuniSwapContract, useLuniClaimContract, useLuniPriceContract, useLuniOrderContract} from '../../hooks/useContract'\n\nimport { useOrderListContract, useLuniClaimContract, useLuniPriceContract, useLuniOrderContract } from '../../hooks/useContract';\nimport { PaddedColumn } from '../SearchModal/styleds';\nimport { ContractFactory, ethers, utils } from 'ethers';\nimport { LUNIORDER_ABI, LUNIORDER_BYTECODE } from '../../constants/abis/luniorder';\nimport { useActiveWeb3React } from '../../hooks';\nimport useENS from '../../hooks/useENS'; //import { BigNumber } from '@ethersproject/bignumber'\n\nimport { useAllTokens } from '../../hooks/Tokens';\nimport { ORDERLIST_ABI, ORDERLIST_ADDRESS } from '../../constants/abis/orderlist'; //import { LUNIPRICE_ABI, LUNIPRICE_ADDRESS } from '../../constants/abis/luniprice'\n\nimport { LUNICLAIM_ABI, LUNICLAIM_BYTECODE } from '../../constants/abis/luniclaim'; //import { luniPrice } from '../../data/luniPrice'\n//import { ORDERLIST_ABI, ORDERLIST_BYTECODE } from '../../constants/abis/orderlist'\n//import { Token, Pair } from \"@uniswap/sdk\";\n\nconst LabelRow = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap}\n  align-items: center;\n  color: ${({\n  theme\n}) => theme.text1};\n  font-size: 0.75rem;\n  line-height: 1rem;\n  padding: 0.75rem 1rem 0 1rem;\n  span:hover {\n    cursor: pointer;\n    color: ${({\n  theme\n}) => darken(0.2, theme.text2)};\n  }\n`;\n// interface ByteCode{\n//   linkReferences: {};\n//   object: string;\n//   opcodes: string;\n//   sourceMap: string;\n// }\nvar tokenList = {\n  \"Dai Stablecoin\": \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\",\n  \"Uniswap\": \"0x2404fc115dbcb35dcae5465bd878d155b34017e3\",\n  \"Ether\": \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\",\n  \"Wrapped Ether\": \"0xd0a1e359811322d97991e03f863a0c30c2cf029c\",\n  \"Maker\": \"0x2404fc115dbcb35dcae5465bd878d155b34017e3\"\n};\n\nfunction createContractFactory(library, recipient, ABI, BYTECODE) {\n  return new ContractFactory(ABI, BYTECODE, library === null || library === void 0 ? void 0 : library.getSigner(recipient));\n} //  function orderListTransaction(library:Web3Provider | undefined, recipient: string | null | undefined){\n//    return new ContractFactory(new utils.Interface(ORDERLIST_ABI),ORDERLIST_BYTECODE, library?.getSigner(recipient).connectUnchecked());\n//  }\n\n\nfunction getToken(name) {\n  return tokenList[name];\n}\n\nexport default function LuniClaimsButton({\n  recipientAddressOrName,\n  deadline,\n  input,\n  output,\n  token1,\n  token2,\n  id\n}) {\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  let tx;\n\n  if (!library || !recipient || !chainId || !account || !deadline) {\n    tx = {\n      recipientAddressOrName: null,\n      deadline: null,\n      input: null,\n      output: null,\n      price: null,\n      token1: undefined,\n      token2: undefined,\n      id: \"\"\n    };\n    console.log(tx);\n  } else {\n    //const pairAddress = Pair.getAddress(new Token(chainId, token1 as string ,18),new Token(chainId, token2?.toString(),18))\n    tx = {\n      recipientAddressOrName: recipient,\n      deadline: deadline,\n      input: input,\n      output: output,\n      price: null,\n      token1: getToken(token1),\n      token2: getToken(token2),\n      id: \"\"\n    };\n  }\n\n  let [sendTransaction, txSendState] = useState(Boolean);\n  console.log(sendTransaction, txSendState);\n  const orderListContract = useOrderListContract();\n  const luniClaimContract = useLuniClaimContract();\n  const luniOrderContract = useLuniOrderContract();\n  const luniPriceContract = useLuniPriceContract();\n  const luniSwap = {\n    luniOrder: luniOrderContract,\n    orderList: orderListContract,\n    luniClaim: luniClaimContract,\n    luniPrice: luniPriceContract\n  };\n  console.log(luniSwap);\n  const tokenList = useAllTokens(); //const loadedUrlParams = useDefaultsFromURLSearch()\n  //const loadedInputCurrency = useCurrency(loadedUrlParams?.inputCurrencyId)\n  //const loadedOutputCurrency = useCurrency(loadedUrlParams?.outputCurrencyId)\n\n  return /*#__PURE__*/React.createElement(LabelRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PaddedColumn, {\n    gap: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ButtonRed, {\n    id: \"createLuniClaims\",\n    onClick: async () => {\n      console.log(tokenList); //luniOrder needs to be deployed for every order\n\n      const contractFactory = createContractFactory(library, recipient, new utils.Interface(LUNIORDER_ABI), \"0x\" + LUNIORDER_BYTECODE.object.toString()); //luniClaim needs to be deployed for every order\n\n      const luniClaimFactory = createContractFactory(library, recipient, new utils.Interface(LUNICLAIM_ABI), \"0x\" + LUNICLAIM_BYTECODE.object.toString()); // const orderListTx = orderListTransaction(library, recipient);\n      //need to add order to orderList for every order but not deploy\n\n      const orderList = new ethers.Contract(ORDERLIST_ADDRESS, ORDERLIST_ABI, library); //const luniPriceTx = new ethers.Contract(LUNIPRICE_ADDRESS,LUNIPRICE_ABI, library);\n      //const luniOrderTx = new ethers.Contract(LUNIORDER_ADDRESS, LUNIORDER_ABI, library);\n      // console.log(contractFactory);\n      // console.log(utils.parseEther(tx.input!).toString());\n      //var price = await luniPriceTx.callStatic.getTokenToTokenPrice(utils.getAddress(tx.token1!),utils.getAddress(tx.token2!),utils.parseEther(tx.input!).toString());\n      // console.log(price);\n      // console.log(tx);\n      //var temp = await orderListTx.callStatic.head();\n      //var temp2 = await orderListTx.callStatic.get(temp);\n      //console.log(temp);\n      //console.log(temp2);\n      //const gasTx: any = await contractFactory.getDeployTransaction(tx.deadline,  utils.getAddress(\"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\"), utils.parseUnits(tx.input!, 18), utils.parseUnits(tx.output!, 18));\n      //const gasEst: any = await library?.estimateGas(gasTx)\n      //console.log(gasEst);\n      //const gas = await BigNumber.from(gasEst._hex);\n      //console.log(gas);\n      // (function(){\n      //     let inp :string = tx.input!;\n      //     let out :string = tx.output!;\n      //     console.log(tx.token1);\n      //     const _contract = contractFactory.deploy(tx.deadline, utils.getAddress(tx.token1!), utils.parseUnits(inp, 18), utils.parseUnits(out, 18)).then(async (cont) => {\n      //         await cont.deployed();\n      //         console.log(orderListTx);\n      //         console.log(cont.deployTransaction);\n      //         const luniClaimTx = luniClaimFactory.deploy();\n      //         console.log(luniClaimTx);\n      //       }).catch((error) => {\n      //         let hash = error.transactionHash;\n      //         console.log(\"Failed to deploy in: \", hash)\n      //       });\n      //     console.log(_contract);\n      // })();\n\n      (async function () {\n        let inp = tx.input;\n        let out = tx.output;\n        let price = ethers.utils.parseEther((Number(inp) / Number(out)).toFixed(10)); //  let price: BigNumber = await BigNumber.from((Number(inp)/Number(out))*Math.pow(10,18));\n        //     console.log(tx.token1);\n\n        try {\n          //let wallet = new ethers.Wallet(,library)\n          let _contract = await contractFactory.deploy(tx.deadline, utils.getAddress(tx.token1), utils.parseUnits(inp, 18), utils.parseUnits(out, 18));\n\n          await _contract.deployed();\n          console.log(_contract.deployTransaction.hash);\n          let luniOrderContract = new ethers.Contract(_contract.address, LUNIORDER_ABI, library);\n          let luniClaimTx = await luniClaimFactory.deploy(_contract.deployTransaction.hash, tx.recipientAddressOrName, tx.deadline, {\n            value: utils.parseUnits(inp, 18)\n          });\n          await luniClaimTx.deployed(); //divide base 10\n\n          let orderListTx = await orderList.callStatic.addHead(luniOrderContract.callStatic.hashedSecret(), tx.deadline, utils.parseUnits(inp, 18), price, utils.getAddress(tx.token1), tx.recipientAddressOrName);\n          console.log(orderListTx);\n          let order = await orderList.populateTransaction.findIdForData(luniOrderContract.callStatic.hashedSecret());\n          let orderCall = await (library === null || library === void 0 ? void 0 : library.call(order));\n          console.log(orderCall);\n        } catch (error) {\n          console.log(error);\n        } //         //console.log(cont.deployTransaction);\n        //         //console.log(luniClaimTx);\n        //       //}).catch((error) => {\n        //       //  let hash = error.transactionHash;\n        //       //  console.log(\"Failed to deploy in: \", hash)\n        //       //});\n        //     let temp = await _contract.deployed();\n        //     console.log(_contract);\n        //     console.log(temp);\n\n\n        console.log(orderList); //let temp2 = await luniClaimTx.deployed();\n        //console.log(luniClaimTx);\n        //console.log(temp2);\n      })();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, \"Create Order\")));\n}","map":{"version":3,"sources":["/home/devpc/LoonySwap/uniswap-interface/src/components/Order/luniTransaction.tsx"],"names":["React","useState","styled","darken","ButtonRed","useOrderListContract","useLuniClaimContract","useLuniPriceContract","useLuniOrderContract","PaddedColumn","ContractFactory","ethers","utils","LUNIORDER_ABI","LUNIORDER_BYTECODE","useActiveWeb3React","useENS","useAllTokens","ORDERLIST_ABI","ORDERLIST_ADDRESS","LUNICLAIM_ABI","LUNICLAIM_BYTECODE","LabelRow","div","theme","flexRowNoWrap","text1","text2","tokenList","createContractFactory","library","recipient","ABI","BYTECODE","getSigner","getToken","name","LuniClaimsButton","recipientAddressOrName","deadline","input","output","token1","token2","id","account","chainId","address","recipientAddress","tx","price","undefined","console","log","sendTransaction","txSendState","Boolean","orderListContract","luniClaimContract","luniOrderContract","luniPriceContract","luniSwap","luniOrder","orderList","luniClaim","luniPrice","contractFactory","Interface","object","toString","luniClaimFactory","Contract","inp","out","parseEther","Number","toFixed","_contract","deploy","getAddress","parseUnits","deployed","deployTransaction","hash","luniClaimTx","value","orderListTx","callStatic","addHead","hashedSecret","order","populateTransaction","findIdForData","orderCall","call","error"],"mappings":"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","sourcesContent":["\n\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { darken } from 'polished'\n\nimport {  ButtonRed} from '../../components/Button'\n// import { useOrderListContract, useLuniSwapContract, useLuniClaimContract, useLuniPriceContract, useLuniOrderContract} from '../../hooks/useContract'\nimport { useOrderListContract, useLuniClaimContract, useLuniPriceContract, useLuniOrderContract} from '../../hooks/useContract'\nimport { PaddedColumn } from '../SearchModal/styleds'\nimport {  Contract, ContractFactory, ethers, utils, Web3Provider } from 'ethers'\nimport { LUNIORDER_ABI, LUNIORDER_BYTECODE} from '../../constants/abis/luniorder'\nimport { useActiveWeb3React } from '../../hooks'\nimport useENS from '../../hooks/useENS'\n//import { BigNumber } from '@ethersproject/bignumber'\nimport {useAllTokens} from '../../hooks/Tokens'\nimport { ORDERLIST_ABI, ORDERLIST_ADDRESS} from '../../constants/abis/orderlist'\n//import { LUNIPRICE_ABI, LUNIPRICE_ADDRESS } from '../../constants/abis/luniprice'\nimport { Interface } from 'ethers/lib/utils'\nimport { LUNICLAIM_ABI, LUNICLAIM_BYTECODE } from '../../constants/abis/luniclaim'\n//import { luniPrice } from '../../data/luniPrice'\n//import { ORDERLIST_ABI, ORDERLIST_BYTECODE } from '../../constants/abis/orderlist'\n\n\n//import { Token, Pair } from \"@uniswap/sdk\";\n\nconst LabelRow = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap}\n  align-items: center;\n  color: ${({ theme }) => theme.text1};\n  font-size: 0.75rem;\n  line-height: 1rem;\n  padding: 0.75rem 1rem 0 1rem;\n  span:hover {\n    cursor: pointer;\n    color: ${({ theme }) => darken(0.2, theme.text2)};\n  }\n`\n\ninterface LuniTransaction {\n    recipientAddressOrName: string | null\n    deadline: string | null\n    input: string | null\n    output: string | null\n    price: string | null\n    token1: string | undefined\n    token2: string | undefined\n    id: string\n\n}\ninterface ILuniSwap{\n    luniOrder:Contract | null ,\n    orderList:Contract | null ,\n    luniClaim:Contract | null ,\n    luniPrice:Contract | null\n}\n// interface ByteCode{\n//   linkReferences: {};\n//   object: string;\n//   opcodes: string;\n//   sourceMap: string;\n// }\n\nvar tokenList: {[key: string]: string} = {\n    \"Dai Stablecoin\": \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\",\n    \"Uniswap\": \"0x2404fc115dbcb35dcae5465bd878d155b34017e3\",\n    \"Ether\": \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\",\n    \"Wrapped Ether\": \"0xd0a1e359811322d97991e03f863a0c30c2cf029c\",\n    \"Maker\": \"0x2404fc115dbcb35dcae5465bd878d155b34017e3\"\n\n}\n\n\nfunction createContractFactory(library:Web3Provider | undefined, recipient: string | null | undefined, ABI:Interface, BYTECODE:string){\n    return new ContractFactory(ABI,BYTECODE, library?.getSigner(recipient));\n}\n//  function orderListTransaction(library:Web3Provider | undefined, recipient: string | null | undefined){\n//    return new ContractFactory(new utils.Interface(ORDERLIST_ABI),ORDERLIST_BYTECODE, library?.getSigner(recipient).connectUnchecked());\n//  }\n\nfunction getToken(name: string){\n\n    return tokenList[name];\n}\n\nexport default function LuniClaimsButton({\n    recipientAddressOrName,\n    deadline,\n    input,\n    output,\n    token1,\n    token2,\n    id,\n\n}: LuniTransaction) {\n  const { account, chainId, library } = useActiveWeb3React()\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n  let tx: LuniTransaction;\n  if( !library || !recipient || !chainId || !account || !deadline){\n      tx = {\n        recipientAddressOrName : null,\n        deadline : null,\n        input : null,\n        output: null,\n        price : null,\n        token1 : undefined,\n        token2 : undefined,\n        id : \"\"\n      }\n    console.log(tx)\n  }\n  else{\n    //const pairAddress = Pair.getAddress(new Token(chainId, token1 as string ,18),new Token(chainId, token2?.toString(),18))\n    tx = {\n        recipientAddressOrName : recipient,\n        deadline : deadline,\n        input : input,\n        output: output,\n        price : null,\n        token1 : getToken(token1!),\n        token2 : getToken(token2!),\n        id : \"\",\n\n      }\n  }\n  let [sendTransaction, txSendState] = useState(Boolean);\n\n  console.log(sendTransaction, txSendState);\n\n  const orderListContract: Contract | null  = useOrderListContract()\n  const luniClaimContract: Contract | null = useLuniClaimContract()\n  const luniOrderContract: Contract | null = useLuniOrderContract()\n  const luniPriceContract: Contract | null = useLuniPriceContract()\n\n\n  const luniSwap :ILuniSwap = {\n\n    luniOrder: luniOrderContract,\n    orderList: orderListContract,\n    luniClaim: luniClaimContract,\n    luniPrice: luniPriceContract,\n  }\n  console.log(luniSwap);\n  const tokenList = useAllTokens();\n  //const loadedUrlParams = useDefaultsFromURLSearch()\n  //const loadedInputCurrency = useCurrency(loadedUrlParams?.inputCurrencyId)\n  //const loadedOutputCurrency = useCurrency(loadedUrlParams?.outputCurrencyId)\n  return (\n          <LabelRow>\n              <PaddedColumn gap='20px'>\n                <ButtonRed id=\"createLuniClaims\" onClick={async () =>\n                    {\n\n                        console.log(tokenList);\n\n                        //luniOrder needs to be deployed for every order\n                        const contractFactory = createContractFactory(library, recipient,new utils.Interface(LUNIORDER_ABI),\"0x\" + LUNIORDER_BYTECODE.object.toString());\n                        //luniClaim needs to be deployed for every order\n                        const luniClaimFactory = createContractFactory(library, recipient,new utils.Interface(LUNICLAIM_ABI),\"0x\" + LUNICLAIM_BYTECODE.object.toString());\n                        // const orderListTx = orderListTransaction(library, recipient);\n\n                        //need to add order to orderList for every order but not deploy\n                        const orderList = new ethers.Contract(ORDERLIST_ADDRESS, ORDERLIST_ABI, library);\n\n\n\n                        //const luniPriceTx = new ethers.Contract(LUNIPRICE_ADDRESS,LUNIPRICE_ABI, library);\n                        //const luniOrderTx = new ethers.Contract(LUNIORDER_ADDRESS, LUNIORDER_ABI, library);\n                        // console.log(contractFactory);\n                        // console.log(utils.parseEther(tx.input!).toString());\n                        //var price = await luniPriceTx.callStatic.getTokenToTokenPrice(utils.getAddress(tx.token1!),utils.getAddress(tx.token2!),utils.parseEther(tx.input!).toString());\n                        // console.log(price);\n                        // console.log(tx);\n                        //var temp = await orderListTx.callStatic.head();\n                        //var temp2 = await orderListTx.callStatic.get(temp);\n                        //console.log(temp);\n                        //console.log(temp2);\n                        //const gasTx: any = await contractFactory.getDeployTransaction(tx.deadline,  utils.getAddress(\"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\"), utils.parseUnits(tx.input!, 18), utils.parseUnits(tx.output!, 18));\n                         \n                        //const gasEst: any = await library?.estimateGas(gasTx)\n                        //console.log(gasEst);\n                        //const gas = await BigNumber.from(gasEst._hex);\n                        //console.log(gas);\n\n                        // (function(){\n                        //     let inp :string = tx.input!;\n                        //     let out :string = tx.output!;\n\n                        //     console.log(tx.token1);\n                        //     const _contract = contractFactory.deploy(tx.deadline, utils.getAddress(tx.token1!), utils.parseUnits(inp, 18), utils.parseUnits(out, 18)).then(async (cont) => {\n                        //         await cont.deployed();\n                        //         console.log(orderListTx);\n                        //         console.log(cont.deployTransaction);\n                        //         const luniClaimTx = luniClaimFactory.deploy();\n                        //         console.log(luniClaimTx);\n                        //       }).catch((error) => {\n                        //         let hash = error.transactionHash;\n                        //         console.log(\"Failed to deploy in: \", hash)\n                        //       });\n                        //     console.log(_contract);\n                        // })();\n\n                         (async function(){\n                           let inp :string = tx.input!;\n                           let out :string = tx.output!;\n                           let price = ethers.utils.parseEther((Number(inp)/Number(out)).toFixed(10));\n                          //  let price: BigNumber = await BigNumber.from((Number(inp)/Number(out))*Math.pow(10,18));\n                          \n                          \n                           \n                      //     console.log(tx.token1);\n                      try{\n                          \n                           \n                           //let wallet = new ethers.Wallet(,library)\n                           let _contract = await contractFactory.deploy(tx.deadline, utils.getAddress(tx.token1!), utils.parseUnits(inp, 18), utils.parseUnits(out, 18));\n                           await _contract.deployed();\n                           \n                           console.log(_contract.deployTransaction.hash);\n                           let luniOrderContract = new ethers.Contract(_contract.address, LUNIORDER_ABI, library)\n                           \n                           let luniClaimTx = await luniClaimFactory.deploy(_contract.deployTransaction.hash, tx.recipientAddressOrName, tx.deadline, {value: utils.parseUnits(inp,18)} );                           \n                           await luniClaimTx.deployed();\n                           //divide base 10\n                           \n                           let orderListTx = await orderList.callStatic.addHead(luniOrderContract.callStatic.hashedSecret(), tx.deadline, utils.parseUnits(inp, 18), price,  utils.getAddress(tx.token1!), tx.recipientAddressOrName);\n                           console.log(orderListTx);\n                           let order = await orderList.populateTransaction.findIdForData(luniOrderContract.callStatic.hashedSecret())\n                           let orderCall = await library?.call(order);\n                           console.log(orderCall);\n                      }\n                      catch(error){\n                        console.log(error)\n                      }\n\n\n                      //         //console.log(cont.deployTransaction);\n\n                      //         //console.log(luniClaimTx);\n                      //       //}).catch((error) => {\n                      //       //  let hash = error.transactionHash;\n                      //       //  console.log(\"Failed to deploy in: \", hash)\n                      //       //});\n\n                      //     let temp = await _contract.deployed();\n                      //     console.log(_contract);\n                      //     console.log(temp);\n                           console.log(orderList);\n                           \n                           //let temp2 = await luniClaimTx.deployed();\n                           //console.log(luniClaimTx);\n                           //console.log(temp2);\n\n                       })();\n                    }\n                }>Create Order</ButtonRed>\n              </PaddedColumn>\n\n          </LabelRow>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}