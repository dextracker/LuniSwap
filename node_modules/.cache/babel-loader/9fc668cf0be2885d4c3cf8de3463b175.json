{"ast":null,"code":"var _jsxFileName = \"/home/devpc/LoonySwap/uniswap-interface/src/pages/Swap/index.tsx\";\nimport { JSBI, Token } from '@uniswap/sdk';\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { ArrowDown } from 'react-feather';\nimport ReactGA from 'react-ga';\nimport { Text } from 'rebass';\nimport { ThemeContext } from 'styled-components';\nimport AddressInputPanel from '../../components/AddressInputPanel'; // import { ButtonError, ButtonLight, ButtonPrimary, ButtonConfirmed, ButtonPink, ButtonRadio } from '../../components/Button'\n\nimport { ButtonError, ButtonLight, ButtonPrimary, ButtonConfirmed } from '../../components/Button';\nimport Card, { GreyCard } from '../../components/Card';\nimport Column, { AutoColumn } from '../../components/Column';\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal';\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel';\nimport { SwapPoolTabs } from '../../components/NavigationTabs';\nimport { AutoRow, RowBetween } from '../../components/Row';\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown';\nimport BetterTradeLink, { DefaultVersionLink } from '../../components/swap/BetterTradeLink';\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee';\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from '../../components/swap/styleds';\nimport TradePrice from '../../components/swap/TradePrice';\nimport TokenWarningModal from '../../components/TokenWarningModal';\nimport ProgressSteps from '../../components/ProgressSteps';\nimport { BETTER_TRADE_LINK_THRESHOLD, INITIAL_ALLOWED_SLIPPAGE } from '../../constants';\nimport { getTradeVersion, isTradeBetter } from '../../data/V1';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useCurrency } from '../../hooks/Tokens';\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback';\nimport useENSAddress from '../../hooks/useENSAddress'; //import { useSwapCallback } from '../../hooks/useSwapCallback'\n\nimport { useOrderListCallback } from '../../hooks/useOrderListCallback';\nimport useToggledVersion, { DEFAULT_VERSION, Version } from '../../hooks/useToggledVersion';\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback';\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks';\nimport { Field } from '../../state/swap/actions';\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from '../../state/swap/hooks';\nimport { useExpertModeManager, useUserSlippageTolerance } from '../../state/user/hooks';\nimport { LinkStyledButton, TYPE } from '../../theme';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices';\nimport AppBody from '../AppBody';\nimport { ClickableText } from '../Pool/styleds';\nimport Loader from '../../components/Loader';\nimport Order from '../../components/Order';\nimport LuniClaimsButton from '../../components/Order/luniTransaction';\nimport DeadlineInput from '../../components/DeadlineInput'; //import * as DateTimePicker from module;\n// const DateTimePicker:any = require(\"../../../node_modules/react-datetime-picker\");\n//import {luniOrder} from '../../data/luniOrder'\n\nexport default function Swap() {\n  var _parsedAmounts$indepe, _parsedAmounts$indepe2, _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$indepe3, _parsedAmounts$Field$, _currencies$Field$INP, _currencies$Field$OUT, _currencies$Field$INP2;\n\n  const loadedUrlParams = useDefaultsFromURLSearch(); // token warning stuff\n\n  const [loadedInputCurrency, loadedOutputCurrency] = [useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.inputCurrencyId), useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.outputCurrencyId)];\n  const [dismissTokenWarning, setDismissTokenWarning] = useState(false);\n  const urlLoadedTokens = useMemo(() => {\n    var _filter, _ref;\n\n    return (_filter = (_ref = [loadedInputCurrency, loadedOutputCurrency]) === null || _ref === void 0 ? void 0 : _ref.filter(c => c instanceof Token)) !== null && _filter !== void 0 ? _filter : [];\n  }, [loadedInputCurrency, loadedOutputCurrency]);\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true);\n  }, []);\n  const {\n    account\n  } = useActiveWeb3React();\n  const theme = useContext(ThemeContext); // toggle wallet when disconnected\n\n  const toggleWalletModal = useWalletModalToggle(); // for expert mode\n\n  const toggleSettings = useToggleSettingsMenu();\n  const [isExpertMode] = useExpertModeManager(); // get custom setting values for user\n\n  const [allowedSlippage] = useUserSlippageTolerance(); //THIS IS WHERE THE SWAP STATE CHANGES AND THE SWAP IS CREATED\n  //CREATE LIMIT ORDER HERE\n  // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState(); //computes trade based on input\n\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const toggledVersion = useToggledVersion();\n  const tradesByVersion = {\n    [Version.v1]: v1Trade,\n    [Version.v2]: v2Trade\n  };\n  const trade = showWrap ? undefined : tradesByVersion[toggledVersion];\n  const defaultTrade = showWrap ? undefined : tradesByVersion[DEFAULT_VERSION];\n  const betterTradeLinkVersion = toggledVersion === Version.v2 && isTradeBetter(v2Trade, v1Trade, BETTER_TRADE_LINK_THRESHOLD) ? Version.v1 : toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade) ? Version.v2 : undefined;\n  const parsedAmounts = showWrap ? {\n    [Field.INPUT]: parsedAmount,\n    [Field.OUTPUT]: parsedAmount\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]); // modal and loading\n\n  const [{\n    showConfirm,\n    tradeToConfirm,\n    swapErrorMessage,\n    attemptingTxn,\n    txHash\n  }, setSwapState] = useState({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  });\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap ? (_parsedAmounts$indepe = (_parsedAmounts$indepe2 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe2 === void 0 ? void 0 : _parsedAmounts$indepe2.toExact()) !== null && _parsedAmounts$indepe !== void 0 ? _parsedAmounts$indepe : '' : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  };\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && currencies[Field.OUTPUT] && ((_parsedAmounts$indepe3 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe3 === void 0 ? void 0 : _parsedAmounts$indepe3.greaterThan(JSBI.BigInt(0))));\n  const noRoute = !route; // check whether the user has approved the router on the input token\n\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage); // check if user has gone through approval process, used to show two step buttons, reset on token change\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false); // mark when a user has submitted an approval, reset onTokenSelection for input field\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput))); // the callback to execute the swap\n  // const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(trade, allowedSlippage, recipient)\n\n  const {\n    callback: swapCallback,\n    error: swapCallbackError\n  } = useOrderListCallback(trade, allowedSlippage, recipient, 123);\n  const {\n    priceImpactWithoutFee\n  } = computeTradePriceBreakdown(trade);\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return;\n    }\n\n    if (!swapCallback) {\n      return;\n    }\n\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined\n    });\n    swapCallback().then(hash => {\n      var _trade$inputAmount, _trade$inputAmount$cu, _trade$outputAmount, _trade$outputAmount$c;\n\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: undefined,\n        txHash: hash\n      });\n      ReactGA.event({\n        category: 'Swap',\n        action: recipient === null ? 'Swap w/o Send' : (recipientAddress !== null && recipientAddress !== void 0 ? recipientAddress : recipient) === account ? 'Swap w/o Send + recipient' : 'Swap w/ Send',\n        label: [trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : (_trade$inputAmount$cu = _trade$inputAmount.currency) === null || _trade$inputAmount$cu === void 0 ? void 0 : _trade$inputAmount$cu.symbol, trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : (_trade$outputAmount$c = _trade$outputAmount.currency) === null || _trade$outputAmount$c === void 0 ? void 0 : _trade$outputAmount$c.symbol, getTradeVersion(trade)].join('/')\n      });\n    }).catch(error => {\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: error.message,\n        txHash: undefined\n      });\n    });\n  }, [tradeToConfirm, account, priceImpactWithoutFee, recipient, recipientAddress, showConfirm, swapCallback, trade]); // errors\n\n  const [showInverted, setShowInverted] = useState(false); // warnings on slippage\n\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee); // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n\n  const showApproveFlow = !swapInputError && (approval === ApprovalState.NOT_APPROVED || approval === ApprovalState.PENDING || approvalSubmitted && approval === ApprovalState.APPROVED) && !(priceImpactSeverity > 3 && !isExpertMode);\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash\n    }); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onUserInput(Field.INPUT, '');\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n  const handleInputSelect = useCallback(inputCurrency => {\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n    onCurrencySelection(Field.INPUT, inputCurrency);\n  }, [onCurrencySelection]);\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n  const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [onCurrencySelection]);\n  const [date, setDate] = useState('');\n  const [time, setTime] = useState('');\n  const handleDate = useCallback(() => {\n    setDate(date);\n  }, [date]);\n  const handleTime = useCallback(() => {\n    setTime(time);\n  }, [time]);\n  let deadline;\n  const getDeadline = useCallback(() => {\n    deadline = date.toString() + \"_\" + time.toString();\n  }, [deadline]); // const [dateValue, onDateChange] = useState(new Date());\n  //const luniorder = new luniOrder()\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TokenWarningModal, {\n    isOpen: urlLoadedTokens.length > 0 && !dismissTokenWarning,\n    tokens: urlLoadedTokens,\n    onConfirm: handleConfirmTokenWarning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AppBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SwapPoolTabs, {\n    active: 'swap',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Wrapper, {\n    id: \"swap-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConfirmSwapModal, {\n    isOpen: showConfirm,\n    trade: trade,\n    originalTrade: tradeToConfirm,\n    onAcceptChanges: handleAcceptChanges,\n    attemptingTxn: attemptingTxn,\n    txHash: txHash,\n    recipient: recipient,\n    allowedSlippage: allowedSlippage,\n    onConfirm: handleSwap,\n    swapErrorMessage: swapErrorMessage,\n    onDismiss: handleConfirmDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: 'md',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Order, {\n    id: \"Order Selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(DeadlineInput, {\n    date: date,\n    time: time,\n    setDate: handleDate,\n    setTime: handleTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    label: independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From',\n    value: formattedAmounts[Field.INPUT],\n    showMaxButton: !atMaxAmountInput,\n    currency: currencies[Field.INPUT],\n    onUserInput: handleTypeInput,\n    onMax: handleMaxInput,\n    onCurrencySelect: handleInputSelect,\n    otherCurrency: currencies[Field.OUTPUT],\n    id: \"swap-currency-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AutoRow, {\n    justify: isExpertMode ? 'space-between' : 'center',\n    style: {\n      padding: '0 1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ArrowWrapper, {\n    clickable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ArrowDown, {\n    size: \"16\",\n    onClick: () => {\n      setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n      onSwitchTokens();\n    },\n    color: currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 19\n    }\n  })), recipient === null && !showWrap && isExpertMode ? /*#__PURE__*/React.createElement(LinkStyledButton, {\n    id: \"add-recipient-button\",\n    onClick: () => onChangeRecipient(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 19\n    }\n  }, \"+ Add a send (optional)\") : null)), /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    value: formattedAmounts[Field.OUTPUT],\n    onUserInput: handleTypeOutput,\n    label: independentField === Field.INPUT && !showWrap && trade ? 'To (estimated)' : 'To',\n    showMaxButton: false,\n    currency: currencies[Field.OUTPUT],\n    onCurrencySelect: handleOutputSelect,\n    otherCurrency: currencies[Field.INPUT],\n    id: \"swap-currency-output\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 13\n    }\n  }), recipient !== null && !showWrap ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoRow, {\n    justify: \"space-between\",\n    style: {\n      padding: '0 1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ArrowWrapper, {\n    clickable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ArrowDown, {\n    size: \"16\",\n    color: theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(LinkStyledButton, {\n    id: \"remove-recipient-button\",\n    onClick: () => onChangeRecipient(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 19\n    }\n  }, \"- Remove send\")), /*#__PURE__*/React.createElement(AddressInputPanel, {\n    id: \"recipient\",\n    value: recipient,\n    onChange: onChangeRecipient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 17\n    }\n  })) : null, /*#__PURE__*/React.createElement(AutoRow, {\n    justify: isExpertMode ? 'space-between' : 'center',\n    style: {\n      padding: '0 1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LuniClaimsButton, {\n    recipientAddressOrName: recipient,\n    deadline: getDeadline,\n    input: formattedAmounts[Field.INPUT],\n    output: formattedAmounts[Field.OUTPUT],\n    price: null,\n    token1: (_currencies$Field$INP = currencies[Field.INPUT]) === null || _currencies$Field$INP === void 0 ? void 0 : _currencies$Field$INP.name,\n    token2: (_currencies$Field$OUT = currencies[Field.OUTPUT]) === null || _currencies$Field$OUT === void 0 ? void 0 : _currencies$Field$OUT.name,\n    id: \"Create Luni Claims Order\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 17\n    }\n  })), showWrap ? null : /*#__PURE__*/React.createElement(Card, {\n    padding: '.25rem .75rem 0 .75rem',\n    borderRadius: '20px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 17\n    }\n  }, Boolean(trade) && /*#__PURE__*/React.createElement(RowBetween, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 23\n    }\n  }, \"Price\"), /*#__PURE__*/React.createElement(TradePrice, {\n    price: trade === null || trade === void 0 ? void 0 : trade.executionPrice,\n    showInverted: showInverted,\n    setShowInverted: setShowInverted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 23\n    }\n  })), allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && /*#__PURE__*/React.createElement(RowBetween, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ClickableText, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    onClick: toggleSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 23\n    }\n  }, \"Slippage Tolerance\"), /*#__PURE__*/React.createElement(ClickableText, {\n    fontWeight: 500,\n    fontSize: 14,\n    color: theme.text2,\n    onClick: toggleSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 23\n    }\n  }, allowedSlippage / 100, \"%\"))))), /*#__PURE__*/React.createElement(BottomGrouping, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 11\n    }\n  }, !account ? /*#__PURE__*/React.createElement(ButtonLight, {\n    onClick: toggleWalletModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 15\n    }\n  }, \"Connect Wallet\") : showWrap ? /*#__PURE__*/React.createElement(ButtonPrimary, {\n    disabled: Boolean(wrapInputError),\n    onClick: onWrap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 15\n    }\n  }, wrapInputError !== null && wrapInputError !== void 0 ? wrapInputError : wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null) : noRoute && userHasSpecifiedInputOutput ? /*#__PURE__*/React.createElement(GreyCard, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.main, {\n    mb: \"4px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 17\n    }\n  }, \"Insufficient liquidity for this trade.\")) : showApproveFlow ? /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ButtonConfirmed, {\n    onClick: approveCallback,\n    disabled: approval !== ApprovalState.NOT_APPROVED || approvalSubmitted,\n    width: \"48%\",\n    altDisabledStyle: approval === ApprovalState.PENDING // show solid button while waiting\n    ,\n    confirmed: approval === ApprovalState.APPROVED,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 17\n    }\n  }, approval === ApprovalState.PENDING ? /*#__PURE__*/React.createElement(AutoRow, {\n    gap: \"6px\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 21\n    }\n  }, \"Approving \", /*#__PURE__*/React.createElement(Loader, {\n    stroke: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 33\n    }\n  })) : approvalSubmitted && approval === ApprovalState.APPROVED ? 'Approved' : 'Approve ' + ((_currencies$Field$INP2 = currencies[Field.INPUT]) === null || _currencies$Field$INP2 === void 0 ? void 0 : _currencies$Field$INP2.symbol)), /*#__PURE__*/React.createElement(ButtonError, {\n    onClick: () => {\n      if (isExpertMode) {\n        handleSwap();\n      } else {\n        //CALL CONTRACTS HERE\n        //create order\n        //create claim\n        //add tx to list\n        setSwapState({\n          tradeToConfirm: trade,\n          attemptingTxn: false,\n          swapErrorMessage: undefined,\n          showConfirm: true,\n          txHash: undefined\n        });\n      }\n    },\n    width: \"48%\",\n    id: \"swap-button\",\n    disabled: !isValid || approval !== ApprovalState.APPROVED || priceImpactSeverity > 3 && !isExpertMode,\n    error: isValid && priceImpactSeverity > 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 16,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 19\n    }\n  }, priceImpactSeverity > 3 && !isExpertMode ? `Price Impact High` : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`))) : /*#__PURE__*/React.createElement(ButtonError, {\n    onClick: () => {\n      if (isExpertMode) {\n        handleSwap();\n      } else {\n        setSwapState({\n          tradeToConfirm: trade,\n          attemptingTxn: false,\n          swapErrorMessage: undefined,\n          showConfirm: true,\n          txHash: undefined\n        });\n      }\n    },\n    id: \"swap-button\",\n    disabled: !isValid || priceImpactSeverity > 3 && !isExpertMode || !!swapCallbackError,\n    error: isValid && priceImpactSeverity > 2 && !swapCallbackError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 20,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 17\n    }\n  }, swapInputError ? swapInputError : priceImpactSeverity > 3 && !isExpertMode ? `Price Impact Too High` : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`)), showApproveFlow && /*#__PURE__*/React.createElement(Column, {\n    style: {\n      marginTop: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ProgressSteps, {\n    steps: [approval === ApprovalState.APPROVED],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 17\n    }\n  })), isExpertMode && swapErrorMessage ? /*#__PURE__*/React.createElement(SwapCallbackError, {\n    error: swapErrorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 49\n    }\n  }) : null, betterTradeLinkVersion ? /*#__PURE__*/React.createElement(BetterTradeLink, {\n    version: betterTradeLinkVersion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 15\n    }\n  }) : toggledVersion !== DEFAULT_VERSION && defaultTrade ? /*#__PURE__*/React.createElement(DefaultVersionLink, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 15\n    }\n  }) : null))), /*#__PURE__*/React.createElement(AdvancedSwapDetailsDropdown, {\n    trade: trade,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/devpc/LoonySwap/uniswap-interface/src/pages/Swap/index.tsx"],"names":["JSBI","Token","React","useCallback","useContext","useEffect","useMemo","useState","ArrowDown","ReactGA","Text","ThemeContext","AddressInputPanel","ButtonError","ButtonLight","ButtonPrimary","ButtonConfirmed","Card","GreyCard","Column","AutoColumn","ConfirmSwapModal","CurrencyInputPanel","SwapPoolTabs","AutoRow","RowBetween","AdvancedSwapDetailsDropdown","BetterTradeLink","DefaultVersionLink","confirmPriceImpactWithoutFee","ArrowWrapper","BottomGrouping","SwapCallbackError","Wrapper","TradePrice","TokenWarningModal","ProgressSteps","BETTER_TRADE_LINK_THRESHOLD","INITIAL_ALLOWED_SLIPPAGE","getTradeVersion","isTradeBetter","useActiveWeb3React","useCurrency","ApprovalState","useApproveCallbackFromTrade","useENSAddress","useOrderListCallback","useToggledVersion","DEFAULT_VERSION","Version","useWrapCallback","WrapType","useToggleSettingsMenu","useWalletModalToggle","Field","useDefaultsFromURLSearch","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useExpertModeManager","useUserSlippageTolerance","LinkStyledButton","TYPE","maxAmountSpend","computeTradePriceBreakdown","warningSeverity","AppBody","ClickableText","Loader","Order","LuniClaimsButton","DeadlineInput","Swap","loadedUrlParams","loadedInputCurrency","loadedOutputCurrency","inputCurrencyId","outputCurrencyId","dismissTokenWarning","setDismissTokenWarning","urlLoadedTokens","filter","c","handleConfirmTokenWarning","account","theme","toggleWalletModal","toggleSettings","isExpertMode","allowedSlippage","independentField","typedValue","recipient","v1Trade","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","wrapType","execute","onWrap","wrapInputError","INPUT","OUTPUT","showWrap","NOT_APPLICABLE","address","recipientAddress","toggledVersion","tradesByVersion","v1","v2","trade","undefined","defaultTrade","betterTradeLinkVersion","parsedAmounts","inputAmount","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","value","handleTypeOutput","showConfirm","tradeToConfirm","swapErrorMessage","attemptingTxn","txHash","setSwapState","formattedAmounts","toExact","toSignificant","route","userHasSpecifiedInputOutput","Boolean","greaterThan","BigInt","noRoute","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","PENDING","maxAmountInput","atMaxAmountInput","equalTo","callback","swapCallback","error","swapCallbackError","priceImpactWithoutFee","handleSwap","then","hash","event","category","action","label","currency","symbol","join","catch","message","showInverted","setShowInverted","priceImpactSeverity","showApproveFlow","NOT_APPROVED","APPROVED","handleConfirmDismiss","handleAcceptChanges","handleInputSelect","inputCurrency","handleMaxInput","handleOutputSelect","outputCurrency","date","setDate","time","setTime","handleDate","handleTime","deadline","getDeadline","toString","length","padding","primary1","text2","name","executionPrice","WRAP","UNWRAP","textAlign","marginTop"],"mappings":"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","sourcesContent":["import { CurrencyAmount, JSBI, Token, Trade } from '@uniswap/sdk'\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { ArrowDown } from 'react-feather'\nimport ReactGA from 'react-ga'\nimport { Text } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport AddressInputPanel from '../../components/AddressInputPanel'\n// import { ButtonError, ButtonLight, ButtonPrimary, ButtonConfirmed, ButtonPink, ButtonRadio } from '../../components/Button'\nimport { ButtonError, ButtonLight, ButtonPrimary, ButtonConfirmed } from '../../components/Button'\nimport Card, { GreyCard } from '../../components/Card'\nimport Column, { AutoColumn } from '../../components/Column'\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { SwapPoolTabs } from '../../components/NavigationTabs'\nimport { AutoRow, RowBetween } from '../../components/Row'\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown'\nimport BetterTradeLink, { DefaultVersionLink } from '../../components/swap/BetterTradeLink'\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee'\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from '../../components/swap/styleds'\nimport TradePrice from '../../components/swap/TradePrice'\nimport TokenWarningModal from '../../components/TokenWarningModal'\nimport ProgressSteps from '../../components/ProgressSteps'\n\nimport { BETTER_TRADE_LINK_THRESHOLD, INITIAL_ALLOWED_SLIPPAGE } from '../../constants'\nimport { getTradeVersion, isTradeBetter } from '../../data/V1'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback'\nimport useENSAddress from '../../hooks/useENSAddress'\n//import { useSwapCallback } from '../../hooks/useSwapCallback'\nimport {useOrderListCallback} from '../../hooks/useOrderListCallback'\n\nimport useToggledVersion, { DEFAULT_VERSION, Version } from '../../hooks/useToggledVersion'\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback'\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks'\nimport { Field } from '../../state/swap/actions'\nimport {\n  useDefaultsFromURLSearch,\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState\n} from '../../state/swap/hooks'\nimport { useExpertModeManager, useUserSlippageTolerance } from '../../state/user/hooks'\nimport { LinkStyledButton, TYPE } from '../../theme'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\nimport AppBody from '../AppBody'\nimport { ClickableText } from '../Pool/styleds'\nimport Loader from '../../components/Loader'\nimport Order from '../../components/Order'\nimport LuniClaimsButton from '../../components/Order/luniTransaction'\n\nimport DeadlineInput from '../../components/DeadlineInput'\n\n//import * as DateTimePicker from module;\n// const DateTimePicker:any = require(\"../../../node_modules/react-datetime-picker\");\n\n//import {luniOrder} from '../../data/luniOrder'\n\nexport default function Swap() {\n  const loadedUrlParams = useDefaultsFromURLSearch()\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.inputCurrencyId),\n    useCurrency(loadedUrlParams?.outputCurrencyId)\n  ]\n  const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\n  const urlLoadedTokens: Token[] = useMemo(\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\n    [loadedInputCurrency, loadedOutputCurrency]\n  )\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true)\n  }, [])\n\n  const { account } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle()\n\n  // for expert mode\n  const toggleSettings = useToggleSettingsMenu()\n  const [isExpertMode] = useExpertModeManager()\n\n  // get custom setting values for user\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n\n  //THIS IS WHERE THE SWAP STATE CHANGES AND THE SWAP IS CREATED\n  //CREATE LIMIT ORDER HERE\n  // swap state\n  const { independentField, typedValue, recipient } = useSwapState()\n  \n  //computes trade based on input\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo()\n\n\n  const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\n    currencies[Field.INPUT],\n    currencies[Field.OUTPUT],\n    typedValue\n  )\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\n  const { address: recipientAddress } = useENSAddress(recipient)\n  const toggledVersion = useToggledVersion()\n  const tradesByVersion = {\n    [Version.v1]: v1Trade,\n    [Version.v2]: v2Trade\n  }\n  const trade = showWrap ? undefined : tradesByVersion[toggledVersion]\n  const defaultTrade = showWrap ? undefined : tradesByVersion[DEFAULT_VERSION]\n\n  const betterTradeLinkVersion: Version | undefined =\n    toggledVersion === Version.v2 && isTradeBetter(v2Trade, v1Trade, BETTER_TRADE_LINK_THRESHOLD)\n      ? Version.v1\n      : toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade)\n      ? Version.v2\n      : undefined\n\n  const parsedAmounts = showWrap\n    ? {\n        [Field.INPUT]: parsedAmount,\n        [Field.OUTPUT]: parsedAmount\n      }\n    : {\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount\n      }\n\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n  const isValid = !swapInputError\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value)\n    },\n    [onUserInput]\n  )\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value)\n    },\n    [onUserInput]\n  )\n\n  // modal and loading\n  const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    showConfirm: boolean\n    tradeToConfirm: Trade | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  })\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap\n      ? parsedAmounts[independentField]?.toExact() ?? ''\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? ''\n  }\n\n  const route = trade?.route\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  )\n  const noRoute = !route\n\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true)\n    }\n  }, [approval, approvalSubmitted])\n\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\n\n  // the callback to execute the swap\n  // const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(trade, allowedSlippage, recipient)\n  const { callback: swapCallback, error: swapCallbackError } = useOrderListCallback(trade, allowedSlippage, recipient, 123)\n\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\n\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return\n    }\n    if (!swapCallback) {\n      return\n    }\n    setSwapState({ attemptingTxn: true, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: undefined })\n    swapCallback()\n      .then(hash => {\n        setSwapState({ attemptingTxn: false, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: hash })\n\n        ReactGA.event({\n          category: 'Swap',\n          action:\n            recipient === null\n              ? 'Swap w/o Send'\n              : (recipientAddress ?? recipient) === account\n              ? 'Swap w/o Send + recipient'\n              : 'Swap w/ Send',\n          label: [\n            trade?.inputAmount?.currency?.symbol,\n            trade?.outputAmount?.currency?.symbol,\n            getTradeVersion(trade)\n          ].join('/')\n        })\n      })\n      .catch(error => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined\n        })\n      })\n  }, [tradeToConfirm, account, priceImpactWithoutFee, recipient, recipientAddress, showConfirm, swapCallback, trade])\n\n  // errors\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode)\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({ showConfirm: false, tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '')\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn, showConfirm })\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash])\n\n  const handleInputSelect = useCallback(\n    inputCurrency => {\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency)\n    },\n    [onCurrencySelection]\n  )\n\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact())\n  }, [maxAmountInput, onUserInput])\n\n  const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [\n    onCurrencySelection\n  ])\n  const [date, setDate] = useState('')\n  const [time, setTime] = useState('')\n  const handleDate = useCallback(() => {\n    setDate(date)\n    \n  },[date])\n  const handleTime = useCallback(() => {\n    setTime(time)\n  },[time])\n  let deadline: string;\n  const getDeadline = useCallback(() => {\n    deadline = date.toString() + \"_\" + time.toString()\n  },[deadline])\n  \n  // const [dateValue, onDateChange] = useState(new Date());\n  //const luniorder = new luniOrder()\n\n  return (\n    <>\n      <TokenWarningModal\n        isOpen={urlLoadedTokens.length > 0 && !dismissTokenWarning}\n        tokens={urlLoadedTokens}\n        onConfirm={handleConfirmTokenWarning}\n      />\n      <AppBody>\n        <SwapPoolTabs active={'swap'} />\n        <Wrapper id=\"swap-page\">\n          \n          <ConfirmSwapModal\n            isOpen={showConfirm}\n            trade={trade}\n            originalTrade={tradeToConfirm}\n            onAcceptChanges={handleAcceptChanges}\n            attemptingTxn={attemptingTxn}\n            txHash={txHash}\n            recipient={recipient}\n            allowedSlippage={allowedSlippage}\n            onConfirm={handleSwap}\n            swapErrorMessage={swapErrorMessage}\n            onDismiss={handleConfirmDismiss}\n          />\n\n          <AutoColumn gap={'md'}>\n\n          <Order \n          \n          id=\"Order Selector\"/>    \n          <DeadlineInput\n          date={date}\n          time={time}\n          setDate={handleDate}\n          setTime={handleTime}\n          />\n          \n        {/* <div id=\"deadlineInputDiv\">\n          \n\n\n          <input type=\"date\" id=\"deadlineInput\" name=\"trip-start\"\n          value=\"2018-07-22\"\n          min=\"2018-01-01\" max=\"2018-12-31\"></input>\n\n\n          <input type=\"time\" id=\"deadlineTime\" name=\"deadlineTime\"  required></input>\n\n       </div> */}\n      \n\n            <CurrencyInputPanel\n              label={independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From'}\n              value={formattedAmounts[Field.INPUT]}\n              showMaxButton={!atMaxAmountInput}\n              currency={currencies[Field.INPUT]}\n              onUserInput={handleTypeInput}\n              onMax={handleMaxInput}\n              onCurrencySelect={handleInputSelect}\n              otherCurrency={currencies[Field.OUTPUT]}\n              id=\"swap-currency-input\"\n            />\n            <AutoColumn justify=\"space-between\">\n              <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\n                <ArrowWrapper clickable>\n                  <ArrowDown\n                    size=\"16\"\n                    onClick={() => {\n                      setApprovalSubmitted(false) // reset 2 step UI for approvals\n                      onSwitchTokens()\n                    }}\n                    color={currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2}\n                  />\n                </ArrowWrapper>\n                {recipient === null && !showWrap && isExpertMode ? (\n                  <LinkStyledButton id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\n                    + Add a send (optional)\n                  </LinkStyledButton>\n                ) : null}\n              </AutoRow>\n            </AutoColumn>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.OUTPUT]}\n              onUserInput={handleTypeOutput}\n              label={independentField === Field.INPUT && !showWrap && trade ? 'To (estimated)' : 'To'}\n              showMaxButton={false}\n              currency={currencies[Field.OUTPUT]}\n              onCurrencySelect={handleOutputSelect}\n              otherCurrency={currencies[Field.INPUT]}\n              id=\"swap-currency-output\"\n            />\n            \n\n            \n            {recipient !== null && !showWrap ? (\n              \n             \n              <>\n              <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                  <ArrowWrapper clickable={false}>\n                    <ArrowDown size=\"16\" color={theme.text2} />\n                  </ArrowWrapper>\n                  <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\n                    - Remove send\n                  </LinkStyledButton>\n                </AutoRow>\n                <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\n              </>\n            ) : null}\n\n            <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\n                <LuniClaimsButton\n                recipientAddressOrName = {recipient}\n                deadline = {getDeadline}\n                input = {formattedAmounts[Field.INPUT]}\n                output = {formattedAmounts[Field.OUTPUT]}\n                price = {null}\n                token1 = {currencies[Field.INPUT]?.name}\n                token2 = {currencies[Field.OUTPUT]?.name}\n                id = {\"Create Luni Claims Order\"}\n                \n              />\n             </AutoRow>\n            {showWrap ? null : (\n              <Card padding={'.25rem .75rem 0 .75rem'} borderRadius={'20px'}>\n                <AutoColumn gap=\"4px\">\n                  {Boolean(trade) && (\n                    <RowBetween align=\"center\">\n                      <Text fontWeight={500} fontSize={14} color={theme.text2}>\n                        Price\n                      </Text>\n                      <TradePrice\n                        price={trade?.executionPrice}\n                        showInverted={showInverted}\n                        setShowInverted={setShowInverted}\n                      />\n                    </RowBetween>\n                  )}\n                  {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\n                    <RowBetween align=\"center\">\n                      <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\n                        Slippage Tolerance\n                      </ClickableText>\n                      <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\n                        {allowedSlippage / 100}%\n                      </ClickableText>\n                    </RowBetween>\n                  )}\n                </AutoColumn>\n              </Card>\n            )}\n          </AutoColumn>\n          {/* this is the footer of the index ui */}\n          <BottomGrouping>\n            {!account ? (\n              <ButtonLight onClick={toggleWalletModal}>Connect Wallet</ButtonLight>\n            ) : showWrap ? (\n              <ButtonPrimary disabled={Boolean(wrapInputError)} onClick={onWrap}>\n                {wrapInputError ??\n                  (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\n              </ButtonPrimary>\n            ) : noRoute && userHasSpecifiedInputOutput ? (\n              <GreyCard style={{ textAlign: 'center' }}>\n                <TYPE.main mb=\"4px\">Insufficient liquidity for this trade.</TYPE.main>\n              </GreyCard>\n            ) : showApproveFlow ? (\n              <RowBetween>\n                <ButtonConfirmed\n                  onClick={approveCallback}\n                  disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\n                  width=\"48%\"\n                  altDisabledStyle={approval === ApprovalState.PENDING} // show solid button while waiting\n                  confirmed={approval === ApprovalState.APPROVED}\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <AutoRow gap=\"6px\" justify=\"center\">\n                      Approving <Loader stroke=\"white\" />\n                    </AutoRow>\n                  ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\n                    'Approved'\n                  ) : (\n                    'Approve ' + currencies[Field.INPUT]?.symbol\n                  )}\n                </ButtonConfirmed>\n                {/* THIS IS THE SWAP BUTTON!!!!!!!!!!!!!!!!!!!!!!!!!!! */}\n                <ButtonError\n                  onClick={() => {\n                    if (isExpertMode) {\n                      handleSwap()\n                    } else {\n                      //CALL CONTRACTS HERE\n                      //create order\n                      //create claim\n                      //add tx to list\n                      setSwapState({\n                        tradeToConfirm: trade,\n                        attemptingTxn: false,\n                        swapErrorMessage: undefined,\n                        showConfirm: true,\n                        txHash: undefined\n                      })\n                    }\n                  }}\n                  width=\"48%\"\n                  id=\"swap-button\"\n                  disabled={\n                    !isValid || approval !== ApprovalState.APPROVED || (priceImpactSeverity > 3 && !isExpertMode)\n                  }\n                  error={isValid && priceImpactSeverity > 2}\n                >\n                  <Text fontSize={16} fontWeight={500}>\n                    {priceImpactSeverity > 3 && !isExpertMode\n                      ? `Price Impact High`\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\n                  </Text>\n                </ButtonError>\n              </RowBetween>\n            ) : (\n              <ButtonError\n                onClick={() => {\n                  if (isExpertMode) {\n                    handleSwap()\n                  } else {\n                    setSwapState({\n                      tradeToConfirm: trade,\n                      attemptingTxn: false,\n                      swapErrorMessage: undefined,\n                      showConfirm: true,\n                      txHash: undefined\n                    })\n                  }\n                }}\n                id=\"swap-button\"\n                disabled={!isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError}\n                error={isValid && priceImpactSeverity > 2 && !swapCallbackError}\n              >\n                <Text fontSize={20} fontWeight={500}>\n                  {swapInputError\n                    ? swapInputError\n                    : priceImpactSeverity > 3 && !isExpertMode\n                    ? `Price Impact Too High`\n                    : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\n                </Text>\n              </ButtonError>\n            )}\n            {showApproveFlow && (\n              <Column style={{ marginTop: '1rem' }}>\n                <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\n              </Column>\n            )}\n            {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n            {betterTradeLinkVersion ? (\n              <BetterTradeLink version={betterTradeLinkVersion} />\n            ) : toggledVersion !== DEFAULT_VERSION && defaultTrade ? (\n              <DefaultVersionLink />\n            ) : null}\n          </BottomGrouping>\n        </Wrapper>\n      </AppBody>\n      <AdvancedSwapDetailsDropdown trade={trade} />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}