{"ast":null,"code":"import { JSBI, Percent, Router, TradeType } from '@uniswap/sdk';\nimport { useMemo } from 'react';\nimport { BIPS_BASE, INITIAL_ALLOWED_SLIPPAGE } from '../constants';\nimport { getTradeVersion, useV1TradeExchangeAddress } from '../data/V1';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport v1SwapArguments from '../utils/v1SwapArguments';\nimport { useActiveWeb3React } from './index';\nimport { useLuniClaimContract, useLuniOrderContract, useV1ExchangeContract, useLuniPriceContract } from './useContract';\nimport useENS from './useENS';\nimport { Version } from './useToggledVersion';\nimport { useOrderListContract } from './useContract';\nimport { luniOrder } from '../data/luniOrder'; //import {luniClaim} from '../data/luniClaim'\n\nimport { OrderList } from '../data/OrderList'; //import DeadlineInput from '../components/DeadlineInput'\n\nexport let OrderListCallbackState;\n\n(function (OrderListCallbackState) {\n  OrderListCallbackState[OrderListCallbackState[\"INVALID\"] = 0] = \"INVALID\";\n  OrderListCallbackState[OrderListCallbackState[\"LOADING\"] = 1] = \"LOADING\";\n  OrderListCallbackState[OrderListCallbackState[\"VALID\"] = 2] = \"VALID\";\n})(OrderListCallbackState || (OrderListCallbackState = {}));\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nfunction useOrderListArgs(trade, // trade to execute, required\nallowedSlippage = INITIAL_ALLOWED_SLIPPAGE, // in bips\nrecipientAddressOrName, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\ndeadline) {\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress; // const deadline = useTransactionDeadline()\n\n  const v1Exchange = useV1ExchangeContract(useV1TradeExchangeAddress(trade), true);\n  return useMemo(() => {\n    const tradeVersion = getTradeVersion(trade);\n    if (!trade || !recipient || !library || !account || !tradeVersion || !chainId || !deadline) return [];\n    const contract = tradeVersion === Version.v2 ? getRouterContract(chainId, library, account) : v1Exchange;\n\n    if (!contract) {\n      return [];\n    }\n\n    const swapMethods = []; // const orderListMethods = []\n    // const luniClaimMethods = []\n    // const luniOrderMethods = []\n    // const data = \"\";\n    // const pair = \"\";\n    // const price = \"\";\n    // const deadline = \"\";\n    // const amount = \"\";\n    // const item: OrderListItem = (data:OrderListItem[\"data\"],pair:OrderListItem[\"pair\"],price:OrderListItem[\"price\"],_deadline:OrderListItem[\"deadline\"],amount:OrderListItem[\"amount\"]) =>{\n    //     item.data = data;\n    //     item.pair = pair;\n    //     item.price = price; \n    // };\n\n    switch (tradeVersion) {\n      case Version.v2:\n        swapMethods.push(Router.swapCallParameters(trade, {\n          feeOnTransfer: false,\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient,\n          deadline: deadline\n        })); // luniOrderMethods.push(\n        //   LuniOrder.orderListParameters(trade,{\n        //     feeOnTransfer: false,\n        //     allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n        //     recipient,\n        //     deadline: deadline.toNumber()\n        //   })\n        // )\n        //luni order to call later\n        //const L_Order = new luniOrder(deadline, trade.route.pairs, trade.inputAmount, trade.outputAmount);\n        //claim to add to list\n        //const L_Claim = new luniClaim();\n        //orderListMethods.push(L_Order);\n        //luniClaimMethods.push(L_Claim);\n        //luniOrderMethods.push(L_Order);\n        //const orderList = new OrderList();\n        //const order = new OrderListItem(2,'',2,'',2,'');\n        //orderList.addOrder(order);\n        //console.log(orderList);\n\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          swapMethods.push(Router.swapCallParameters(trade, {\n            feeOnTransfer: true,\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n            recipient,\n            deadline: deadline\n          }));\n        }\n\n        break;\n\n      case Version.v1:\n        swapMethods.push(v1SwapArguments(trade, {\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient,\n          deadline: deadline\n        }));\n        break;\n    } // return swapMethods.map(parameters => ({ parameters, contract })), orderListMethods.map(parameters => ({ parameters, contract })), luniClaimMethods.map(parameters => ({ parameters, contract })))\n\n\n    return swapMethods.map(parameters => ({\n      parameters,\n      contract\n    }));\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade, v1Exchange]);\n}\n\nfunction makeOrderCallArgs(trade, sender, luni, deadline) {\n  const order = new luniOrder(deadline, trade === null || trade === void 0 ? void 0 : trade.route.pairs, trade === null || trade === void 0 ? void 0 : trade.inputAmount, trade === null || trade === void 0 ? void 0 : trade.executionPrice);\n  const list = retrieveOrderList(luni);\n  return {\n    order: order,\n    list: list\n  };\n}\n\nfunction retrieveOrderList(orderListContract) {\n  //get the current on chain orderList\n  return new OrderList(orderListContract);\n} // returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\n\n\nexport function useOrderListCallback(trade, // trade to execute, required\nallowedSlippage = INITIAL_ALLOWED_SLIPPAGE, // in bips\nrecipientAddressOrName, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\ndeadline) {\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const swapCalls = useOrderListArgs(trade, allowedSlippage, recipientAddressOrName, deadline); //creates an object that holds all of the contracts for luniswap\n\n  const orderListContract = useOrderListContract();\n  const luniClaimContract = useLuniClaimContract();\n  const luniOrderContract = useLuniOrderContract();\n  const luniPriceContract = useLuniPriceContract();\n  const luniSwap = {\n    luniOrder: luniOrderContract,\n    orderList: orderListContract,\n    luniClaim: luniClaimContract,\n    luniPrice: luniPriceContract\n  };\n  console.log(luniSwap); //gets the current on chain order list for luniswap\n\n  const orderList = retrieveOrderList(luniSwap.orderList); //create a object for calling luniswap\n\n  const limitCalls = makeOrderCallArgs(trade, account, orderListContract);\n  console.log(orderList);\n  console.log(limitCalls);\n  const addTransaction = useTransactionAdder();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return {\n        state: OrderListCallbackState.INVALID,\n        callback: null,\n        error: 'Missing dependencies'\n      };\n    }\n\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return {\n          state: OrderListCallbackState.INVALID,\n          callback: null,\n          error: 'Invalid recipient'\n        };\n      } else {\n        return {\n          state: OrderListCallbackState.LOADING,\n          callback: null,\n          error: null\n        };\n      }\n    }\n\n    const tradeVersion = getTradeVersion(trade);\n    return {\n      state: OrderListCallbackState.VALID,\n      callback: async function onSwap() {\n        const estimatedCalls = await Promise.all( //useOrderListArgs and map to contract\n        swapCalls.map(call => {\n          const {\n            parameters: {\n              methodName,\n              args,\n              value\n            },\n            contract\n          } = call; //checks to see if any tokens have been sent with the transaction\n\n          const options = !value || isZero(value) ? {} : {\n            value\n          }; //estimates the gas usage of the executing contract\n\n          return contract.estimateGas[methodName](...args, options).then(gasEstimate => {\n            return {\n              call,\n              gasEstimate\n            };\n          }).catch(gasError => {\n            console.debug('Gas estimate failed, trying eth_call to extract error', call);\n            return contract.callStatic[methodName](...args, options).then(result => {\n              console.debug('Unexpected successful call after failed estimate gas', call, gasError, result);\n              return {\n                call,\n                error: new Error('Unexpected issue with estimating the gas. Please try again.')\n              };\n            }).catch(callError => {\n              console.debug('Call threw error', call, callError);\n              let errorMessage;\n\n              switch (callError.reason) {\n                case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n                case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n                  errorMessage = 'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';\n                  break;\n\n                default:\n                  errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`;\n              }\n\n              return {\n                call,\n                error: new Error(errorMessage)\n              };\n            });\n          });\n        })); // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n\n        const successfulEstimation = estimatedCalls.find((el, ix, list) => 'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]));\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter(call => 'error' in call);\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error;\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error');\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: {\n              methodName,\n              args,\n              value\n            }\n          },\n          gasEstimate\n        } = successfulEstimation;\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value) ? {\n            value,\n            from: account\n          } : {\n            from: account\n          })\n        }).then(response => {\n          const inputSymbol = trade.inputAmount.currency.symbol;\n          const outputSymbol = trade.outputAmount.currency.symbol;\n          const inputAmount = trade.inputAmount.toSignificant(3);\n          const outputAmount = trade.outputAmount.toSignificant(3);\n          const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`;\n          const withRecipient = recipient === account ? base : `${base} to ${recipientAddressOrName && isAddress(recipientAddressOrName) ? shortenAddress(recipientAddressOrName) : recipientAddressOrName}`;\n          const withVersion = tradeVersion === Version.v2 ? withRecipient : `${withRecipient} on ${tradeVersion.toUpperCase()}`;\n          addTransaction(response, {\n            summary: withVersion\n          });\n          return response.hash;\n        }).catch(error => {\n          // if the user rejected the tx, pass this along\n          if ((error === null || error === void 0 ? void 0 : error.code) === 4001) {\n            throw new Error('Transaction rejected.');\n          } else {\n            // otherwise, the error was unexpected and we need to convey that\n            console.error(`Swap failed`, error, methodName, args, value);\n            throw new Error(`Swap failed: ${error.message}`);\n          }\n        });\n      },\n      error: null\n    };\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction]);\n}","map":{"version":3,"sources":["/home/devpc/LoonySwap/uniswap-interface/src/hooks/useOrderListCallback.ts"],"names":["JSBI","Percent","Router","TradeType","useMemo","BIPS_BASE","INITIAL_ALLOWED_SLIPPAGE","getTradeVersion","useV1TradeExchangeAddress","useTransactionAdder","calculateGasMargin","getRouterContract","isAddress","shortenAddress","isZero","v1SwapArguments","useActiveWeb3React","useLuniClaimContract","useLuniOrderContract","useV1ExchangeContract","useLuniPriceContract","useENS","Version","useOrderListContract","luniOrder","OrderList","OrderListCallbackState","useOrderListArgs","trade","allowedSlippage","recipientAddressOrName","deadline","account","chainId","library","address","recipientAddress","recipient","v1Exchange","tradeVersion","contract","v2","swapMethods","push","swapCallParameters","feeOnTransfer","BigInt","tradeType","EXACT_INPUT","v1","map","parameters","makeOrderCallArgs","sender","luni","order","route","pairs","inputAmount","executionPrice","list","retrieveOrderList","orderListContract","useOrderListCallback","swapCalls","luniClaimContract","luniOrderContract","luniPriceContract","luniSwap","orderList","luniClaim","luniPrice","console","log","limitCalls","addTransaction","state","INVALID","callback","error","LOADING","VALID","onSwap","estimatedCalls","Promise","all","call","methodName","args","value","options","estimateGas","then","gasEstimate","catch","gasError","debug","callStatic","result","Error","callError","errorMessage","reason","successfulEstimation","find","el","ix","length","errorCalls","filter","gasLimit","from","response","inputSymbol","currency","symbol","outputSymbol","outputAmount","toSignificant","base","withRecipient","withVersion","toUpperCase","summary","hash","code","message"],"mappings":"AAEA,SAASA,IAAT,EAAeC,OAAf,EAAwBC,MAAxB,EAAuDC,SAAvD,QAAwE,cAAxE;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,SAAT,EAAoBC,wBAApB,QAAoD,cAApD;AACA,SAASC,eAAT,EAA0BC,yBAA1B,QAA2D,YAA3D;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,EAAgDC,SAAhD,EAA2DC,cAA3D,QAAiF,UAAjF;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,kBAAT,QAAmC,SAAnC;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,EAAqDC,qBAArD,EAA4EC,oBAA5E,QAAwG,eAAxG;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAAQC,oBAAR,QAAmC,eAAnC;AACA,SAASC,SAAT,QAAyB,mBAAzB,C,CACA;;AAEA,SAAQC,SAAR,QAAwB,mBAAxB,C,CACA;;AAEA,WAAYC,sBAAZ;;WAAYA,sB;AAAAA,EAAAA,sB,CAAAA,sB;AAAAA,EAAAA,sB,CAAAA,sB;AAAAA,EAAAA,sB,CAAAA,sB;GAAAA,sB,KAAAA,sB;;AAuBZ;;;;;;AAMA,SAASC,gBAAT,CACEC,KADF,EAC4B;AAC1BC,eAAuB,GAAGvB,wBAF5B,EAEsD;AACpDwB,sBAHF,EAGyC;AACvCC,QAJF,EAKc;AACZ,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAgClB,kBAAkB,EAAxD;AAEA,QAAM;AAAEmB,IAAAA,OAAO,EAAEC;AAAX,MAAgCf,MAAM,CAACS,sBAAD,CAA5C;AACA,QAAMO,SAAS,GAAGP,sBAAsB,KAAK,IAA3B,GAAkCE,OAAlC,GAA4CI,gBAA9D,CAJY,CAKZ;;AAEA,QAAME,UAAU,GAAGnB,qBAAqB,CAACX,yBAAyB,CAACoB,KAAD,CAA1B,EAAmC,IAAnC,CAAxC;AAEA,SAAOxB,OAAO,CAAC,MAAM;AACnB,UAAMmC,YAAY,GAAGhC,eAAe,CAACqB,KAAD,CAApC;AAEA,QAAI,CAACA,KAAD,IAAU,CAACS,SAAX,IAAwB,CAACH,OAAzB,IAAoC,CAACF,OAArC,IAAgD,CAACO,YAAjD,IAAiE,CAACN,OAAlE,IAA6E,CAACF,QAAlF,EAA4F,OAAO,EAAP;AAE5F,UAAMS,QAAyB,GAC7BD,YAAY,KAAKjB,OAAO,CAACmB,EAAzB,GAA8B9B,iBAAiB,CAACsB,OAAD,EAAUC,OAAV,EAAmBF,OAAnB,CAA/C,GAA6EM,UAD/E;;AAEA,QAAI,CAACE,QAAL,EAAe;AACb,aAAO,EAAP;AACD;;AAED,UAAME,WAAW,GAAG,EAApB,CAXmB,CAYnB;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,YAAQH,YAAR;AACE,WAAKjB,OAAO,CAACmB,EAAb;AAEEC,QAAAA,WAAW,CAACC,IAAZ,CACEzC,MAAM,CAAC0C,kBAAP,CAA0BhB,KAA1B,EAAiC;AAC/BiB,UAAAA,aAAa,EAAE,KADgB;AAE/BhB,UAAAA,eAAe,EAAE,IAAI5B,OAAJ,CAAYD,IAAI,CAAC8C,MAAL,CAAYjB,eAAZ,CAAZ,EAA0CxB,SAA1C,CAFc;AAG/BgC,UAAAA,SAH+B;AAI/BN,UAAAA,QAAQ,EAAEA;AAJqB,SAAjC,CADF,EAFF,CAUE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAIH,KAAK,CAACmB,SAAN,KAAoB5C,SAAS,CAAC6C,WAAlC,EAA+C;AAC7CN,UAAAA,WAAW,CAACC,IAAZ,CACEzC,MAAM,CAAC0C,kBAAP,CAA0BhB,KAA1B,EAAiC;AAC/BiB,YAAAA,aAAa,EAAE,IADgB;AAE/BhB,YAAAA,eAAe,EAAE,IAAI5B,OAAJ,CAAYD,IAAI,CAAC8C,MAAL,CAAYjB,eAAZ,CAAZ,EAA0CxB,SAA1C,CAFc;AAG/BgC,YAAAA,SAH+B;AAI/BN,YAAAA,QAAQ,EAAEA;AAJqB,WAAjC,CADF;AAQD;;AACD;;AACF,WAAKT,OAAO,CAAC2B,EAAb;AACEP,QAAAA,WAAW,CAACC,IAAZ,CACE5B,eAAe,CAACa,KAAD,EAAQ;AACrBC,UAAAA,eAAe,EAAE,IAAI5B,OAAJ,CAAYD,IAAI,CAAC8C,MAAL,CAAYjB,eAAZ,CAAZ,EAA0CxB,SAA1C,CADI;AAErBgC,UAAAA,SAFqB;AAGrBN,UAAAA,QAAQ,EAAEA;AAHW,SAAR,CADjB;AAOA;AApDJ,KA5BmB,CAkFnB;;;AACA,WAAOW,WAAW,CAACQ,GAAZ,CAAgBC,UAAU,KAAK;AAAEA,MAAAA,UAAF;AAAcX,MAAAA;AAAd,KAAL,CAA1B,CAAP;AACD,GApFa,EAoFX,CAACR,OAAD,EAAUH,eAAV,EAA2BI,OAA3B,EAAoCF,QAApC,EAA8CG,OAA9C,EAAuDG,SAAvD,EAAkET,KAAlE,EAAyEU,UAAzE,CApFW,CAAd;AAqFD;;AAgBD,SAASc,iBAAT,CACExB,KADF,EAEEyB,MAFF,EAGEC,IAHF,EAIEvB,QAJF,EAKgB;AAEd,QAAMwB,KAAK,GAAG,IAAI/B,SAAJ,CAAcO,QAAd,EAAwBH,KAAxB,aAAwBA,KAAxB,uBAAwBA,KAAK,CAAE4B,KAAP,CAAaC,KAArC,EAA4C7B,KAA5C,aAA4CA,KAA5C,uBAA4CA,KAAK,CAAE8B,WAAnD,EAAgE9B,KAAhE,aAAgEA,KAAhE,uBAAgEA,KAAK,CAAE+B,cAAvE,CAAd;AACA,QAAMC,IAAI,GAAGC,iBAAiB,CAACP,IAAD,CAA9B;AACA,SAAuB;AACrBC,IAAAA,KAAK,EAAEA,KADc;AAErBK,IAAAA,IAAI,EAAEA;AAFe,GAAvB;AAID;;AAED,SAASC,iBAAT,CAA2BC,iBAA3B,EAA2D;AACzD;AACA,SAAO,IAAIrC,SAAJ,CAAcqC,iBAAd,CAAP;AACD,C,CAED;AACA;;;AACA,OAAO,SAASC,oBAAT,CACLnC,KADK,EACqB;AAC1BC,eAAuB,GAAGvB,wBAFrB,EAE+C;AACpDwB,sBAHK,EAGkC;AACvCC,QAJK,EAK8F;AACnG,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAgClB,kBAAkB,EAAxD;AAGA,QAAMgD,SAAS,GAAGrC,gBAAgB,CAACC,KAAD,EAAQC,eAAR,EAAyBC,sBAAzB,EAAiDC,QAAjD,CAAlC,CAJmG,CASnG;;AACA,QAAM+B,iBAAkC,GAAIvC,oBAAoB,EAAhE;AACA,QAAM0C,iBAAkC,GAAGhD,oBAAoB,EAA/D;AACA,QAAMiD,iBAAkC,GAAGhD,oBAAoB,EAA/D;AACA,QAAMiD,iBAAkC,GAAG/C,oBAAoB,EAA/D;AACA,QAAMgD,QAAkB,GAAc;AAEpC5C,IAAAA,SAAS,EAAE0C,iBAFyB;AAGpCG,IAAAA,SAAS,EAAEP,iBAHyB;AAIpCQ,IAAAA,SAAS,EAAEL,iBAJyB;AAKpCM,IAAAA,SAAS,EAAEJ;AALyB,GAAtC;AAOAK,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EArBmG,CAsBnG;;AACA,QAAMC,SAAS,GAAGR,iBAAiB,CAACO,QAAQ,CAACC,SAAV,CAAnC,CAvBmG,CAwBnG;;AACA,QAAMK,UAAU,GAAGtB,iBAAiB,CAACxB,KAAD,EAAQI,OAAR,EAAgB8B,iBAAhB,CAApC;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ;AAKA,QAAMC,cAAc,GAAGlE,mBAAmB,EAA1C;AAEA,QAAM;AAAE0B,IAAAA,OAAO,EAAEC;AAAX,MAAgCf,MAAM,CAACS,sBAAD,CAA5C;AACA,QAAMO,SAAS,GAAGP,sBAAsB,KAAK,IAA3B,GAAkCE,OAAlC,GAA4CI,gBAA9D;AAEA,SAAOhC,OAAO,CAAC,MAAM;AACnB,QAAI,CAACwB,KAAD,IAAU,CAACM,OAAX,IAAsB,CAACF,OAAvB,IAAkC,CAACC,OAAvC,EAAgD;AAC9C,aAAO;AAAE2C,QAAAA,KAAK,EAAElD,sBAAsB,CAACmD,OAAhC;AAAyCC,QAAAA,QAAQ,EAAE,IAAnD;AAAyDC,QAAAA,KAAK,EAAE;AAAhE,OAAP;AACD;;AACD,QAAI,CAAC1C,SAAL,EAAgB;AACd,UAAIP,sBAAsB,KAAK,IAA/B,EAAqC;AACnC,eAAO;AAAE8C,UAAAA,KAAK,EAAElD,sBAAsB,CAACmD,OAAhC;AAAyCC,UAAAA,QAAQ,EAAE,IAAnD;AAAyDC,UAAAA,KAAK,EAAE;AAAhE,SAAP;AACD,OAFD,MAEO;AACL,eAAO;AAAEH,UAAAA,KAAK,EAAElD,sBAAsB,CAACsD,OAAhC;AAAyCF,UAAAA,QAAQ,EAAE,IAAnD;AAAyDC,UAAAA,KAAK,EAAE;AAAhE,SAAP;AACD;AACF;;AAED,UAAMxC,YAAY,GAAGhC,eAAe,CAACqB,KAAD,CAApC;AAEA,WAAO;AACLgD,MAAAA,KAAK,EAAElD,sBAAsB,CAACuD,KADzB;AAELH,MAAAA,QAAQ,EAAE,eAAeI,MAAf,GAAyC;AACjD,cAAMC,cAAmC,GAAG,MAAMC,OAAO,CAACC,GAAR,EAChD;AACArB,QAAAA,SAAS,CAACd,GAAV,CAAcoC,IAAI,IAAI;AACpB,gBAAM;AACJnC,YAAAA,UAAU,EAAE;AAAEoC,cAAAA,UAAF;AAAcC,cAAAA,IAAd;AAAoBC,cAAAA;AAApB,aADR;AAEJjD,YAAAA;AAFI,cAGF8C,IAHJ,CADoB,CAKpB;;AACA,gBAAMI,OAAO,GAAG,CAACD,KAAD,IAAU3E,MAAM,CAAC2E,KAAD,CAAhB,GAA0B,EAA1B,GAA+B;AAAEA,YAAAA;AAAF,WAA/C,CANoB,CAQpB;;AACA,iBAAOjD,QAAQ,CAACmD,WAAT,CAAqBJ,UAArB,EAAiC,GAAGC,IAApC,EAA0CE,OAA1C,EACJE,IADI,CACCC,WAAW,IAAI;AACnB,mBAAO;AACLP,cAAAA,IADK;AAELO,cAAAA;AAFK,aAAP;AAID,WANI,EAOJC,KAPI,CAOEC,QAAQ,IAAI;AACjBvB,YAAAA,OAAO,CAACwB,KAAR,CAAc,uDAAd,EAAuEV,IAAvE;AAEA,mBAAO9C,QAAQ,CAACyD,UAAT,CAAoBV,UAApB,EAAgC,GAAGC,IAAnC,EAAyCE,OAAzC,EACJE,IADI,CACCM,MAAM,IAAI;AACd1B,cAAAA,OAAO,CAACwB,KAAR,CAAc,sDAAd,EAAsEV,IAAtE,EAA4ES,QAA5E,EAAsFG,MAAtF;AACA,qBAAO;AAAEZ,gBAAAA,IAAF;AAAQP,gBAAAA,KAAK,EAAE,IAAIoB,KAAJ,CAAU,6DAAV;AAAf,eAAP;AACD,aAJI,EAKJL,KALI,CAKEM,SAAS,IAAI;AAClB5B,cAAAA,OAAO,CAACwB,KAAR,CAAc,kBAAd,EAAkCV,IAAlC,EAAwCc,SAAxC;AACA,kBAAIC,YAAJ;;AACA,sBAAQD,SAAS,CAACE,MAAlB;AACE,qBAAK,6CAAL;AACA,qBAAK,yCAAL;AACED,kBAAAA,YAAY,GACV,4HADF;AAEA;;AACF;AACEA,kBAAAA,YAAY,GAAI,gDAA+CD,SAAS,CAACE,MAAO,sEAAhF;AAPJ;;AASA,qBAAO;AAAEhB,gBAAAA,IAAF;AAAQP,gBAAAA,KAAK,EAAE,IAAIoB,KAAJ,CAAUE,YAAV;AAAf,eAAP;AACD,aAlBI,CAAP;AAmBD,WA7BI,CAAP;AA8BD,SAvCD,CAFgD,CAAlD,CADiD,CA6CjD;;AACA,cAAME,oBAAoB,GAAGpB,cAAc,CAACqB,IAAf,CAC3B,CAACC,EAAD,EAAKC,EAAL,EAAS9C,IAAT,KACE,iBAAiB6C,EAAjB,KAAwBC,EAAE,KAAK9C,IAAI,CAAC+C,MAAL,GAAc,CAArB,IAA0B,iBAAiB/C,IAAI,CAAC8C,EAAE,GAAG,CAAN,CAAvE,CAFyB,CAA7B;;AAKA,YAAI,CAACH,oBAAL,EAA2B;AACzB,gBAAMK,UAAU,GAAGzB,cAAc,CAAC0B,MAAf,CAAuBvB,IAAD,IAA8B,WAAWA,IAA/D,CAAnB;AACA,cAAIsB,UAAU,CAACD,MAAX,GAAoB,CAAxB,EAA2B,MAAMC,UAAU,CAACA,UAAU,CAACD,MAAX,GAAoB,CAArB,CAAV,CAAkC5B,KAAxC;AAC3B,gBAAM,IAAIoB,KAAJ,CAAU,4EAAV,CAAN;AACD;;AAED,cAAM;AACJb,UAAAA,IAAI,EAAE;AACJ9C,YAAAA,QADI;AAEJW,YAAAA,UAAU,EAAE;AAAEoC,cAAAA,UAAF;AAAcC,cAAAA,IAAd;AAAoBC,cAAAA;AAApB;AAFR,WADF;AAKJI,UAAAA;AALI,YAMFU,oBANJ;AAQA,eAAO/D,QAAQ,CAAC+C,UAAD,CAAR,CAAqB,GAAGC,IAAxB,EAA8B;AACnCsB,UAAAA,QAAQ,EAAEpG,kBAAkB,CAACmF,WAAD,CADO;AAEnC,cAAIJ,KAAK,IAAI,CAAC3E,MAAM,CAAC2E,KAAD,CAAhB,GAA0B;AAAEA,YAAAA,KAAF;AAASsB,YAAAA,IAAI,EAAE/E;AAAf,WAA1B,GAAqD;AAAE+E,YAAAA,IAAI,EAAE/E;AAAR,WAAzD;AAFmC,SAA9B,EAIJ4D,IAJI,CAIEoB,QAAD,IAAmB;AACvB,gBAAMC,WAAW,GAAGrF,KAAK,CAAC8B,WAAN,CAAkBwD,QAAlB,CAA2BC,MAA/C;AACA,gBAAMC,YAAY,GAAGxF,KAAK,CAACyF,YAAN,CAAmBH,QAAnB,CAA4BC,MAAjD;AACA,gBAAMzD,WAAW,GAAG9B,KAAK,CAAC8B,WAAN,CAAkB4D,aAAlB,CAAgC,CAAhC,CAApB;AACA,gBAAMD,YAAY,GAAGzF,KAAK,CAACyF,YAAN,CAAmBC,aAAnB,CAAiC,CAAjC,CAArB;AAEA,gBAAMC,IAAI,GAAI,QAAO7D,WAAY,IAAGuD,WAAY,QAAOI,YAAa,IAAGD,YAAa,EAApF;AACA,gBAAMI,aAAa,GACjBnF,SAAS,KAAKL,OAAd,GACIuF,IADJ,GAEK,GAAEA,IAAK,OACNzF,sBAAsB,IAAIlB,SAAS,CAACkB,sBAAD,CAAnC,GACIjB,cAAc,CAACiB,sBAAD,CADlB,GAEIA,sBACL,EAPP;AASA,gBAAM2F,WAAW,GACflF,YAAY,KAAKjB,OAAO,CAACmB,EAAzB,GAA8B+E,aAA9B,GAA+C,GAAEA,aAAc,OAAOjF,YAAD,CAAsBmF,WAAtB,EAAoC,EAD3G;AAGA/C,UAAAA,cAAc,CAACqC,QAAD,EAAW;AACvBW,YAAAA,OAAO,EAAEF;AADc,WAAX,CAAd;AAIA,iBAAOT,QAAQ,CAACY,IAAhB;AACD,SA5BI,EA6BJ9B,KA7BI,CA6BGf,KAAD,IAAgB;AACrB;AACA,cAAI,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAE8C,IAAP,MAAgB,IAApB,EAA0B;AACxB,kBAAM,IAAI1B,KAAJ,CAAU,uBAAV,CAAN;AACD,WAFD,MAEO;AACL;AACA3B,YAAAA,OAAO,CAACO,KAAR,CAAe,aAAf,EAA6BA,KAA7B,EAAoCQ,UAApC,EAAgDC,IAAhD,EAAsDC,KAAtD;AACA,kBAAM,IAAIU,KAAJ,CAAW,gBAAepB,KAAK,CAAC+C,OAAQ,EAAxC,CAAN;AACD;AACF,SAtCI,CAAP;AAuCD,OA1GI;AA2GL/C,MAAAA,KAAK,EAAE;AA3GF,KAAP;AA6GD,GA3Ha,EA2HX,CAACnD,KAAD,EAAQM,OAAR,EAAiBF,OAAjB,EAA0BC,OAA1B,EAAmCI,SAAnC,EAA8CP,sBAA9C,EAAsEkC,SAAtE,EAAiFW,cAAjF,CA3HW,CAAd;AA4HD","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from '@uniswap/sdk'\nimport { useMemo } from 'react'\nimport { BIPS_BASE, INITIAL_ALLOWED_SLIPPAGE } from '../constants'\nimport { getTradeVersion, useV1TradeExchangeAddress } from '../data/V1'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport v1SwapArguments from '../utils/v1SwapArguments'\nimport { useActiveWeb3React } from './index'\nimport { useLuniClaimContract, useLuniOrderContract, useV1ExchangeContract, useLuniPriceContract } from './useContract'\nimport useTransactionDeadline from './useTransactionDeadline'\nimport useENS from './useENS'\nimport { Version } from './useToggledVersion'\nimport {useOrderListContract} from './useContract'\nimport { luniOrder} from '../data/luniOrder'\n//import {luniClaim} from '../data/luniClaim'\n\nimport {OrderList} from '../data/OrderList'\n//import DeadlineInput from '../components/DeadlineInput'\n\nexport enum OrderListCallbackState {\n  INVALID,\n  LOADING,\n  VALID\n}\n\ninterface SwapCall {\n  contract: Contract\n  parameters: SwapParameters | any\n}\n\ninterface SuccessfulCall {\n  call: SwapCall\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall {\n  call: SwapCall\n  error: Error\n}\n\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nfunction useOrderListArgs(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null ,// the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n  deadline: number | null\n): SwapCall[] {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n  // const deadline = useTransactionDeadline()\n  \n  const v1Exchange = useV1ExchangeContract(useV1TradeExchangeAddress(trade), true)\n\n  return useMemo(() => {\n    const tradeVersion = getTradeVersion(trade)\n    \n    if (!trade || !recipient || !library || !account || !tradeVersion || !chainId || !deadline) return []\n\n    const contract: Contract | null =\n      tradeVersion === Version.v2 ? getRouterContract(chainId, library, account) : v1Exchange\n    if (!contract) {\n      return []\n    }\n\n    const swapMethods = []\n    // const orderListMethods = []\n    // const luniClaimMethods = []\n    // const luniOrderMethods = []\n\n\n    // const data = \"\";\n    // const pair = \"\";\n    // const price = \"\";\n    // const deadline = \"\";\n    // const amount = \"\";\n    \n    // const item: OrderListItem = (data:OrderListItem[\"data\"],pair:OrderListItem[\"pair\"],price:OrderListItem[\"price\"],_deadline:OrderListItem[\"deadline\"],amount:OrderListItem[\"amount\"]) =>{\n    //     item.data = data;\n    //     item.pair = pair;\n    //     item.price = price; \n    // };\n    switch (tradeVersion) {\n      case Version.v2:\n        \n        swapMethods.push(\n          Router.swapCallParameters(trade, {\n            feeOnTransfer: false,\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n            recipient,\n            deadline: deadline\n          })\n        )\n        // luniOrderMethods.push(\n        //   LuniOrder.orderListParameters(trade,{\n        //     feeOnTransfer: false,\n        //     allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n        //     recipient,\n        //     deadline: deadline.toNumber()\n        //   })\n        // )\n\n\n        //luni order to call later\n        //const L_Order = new luniOrder(deadline, trade.route.pairs, trade.inputAmount, trade.outputAmount);\n        //claim to add to list\n        //const L_Claim = new luniClaim();\n        //orderListMethods.push(L_Order);\n        //luniClaimMethods.push(L_Claim);\n        //luniOrderMethods.push(L_Order);\n        //const orderList = new OrderList();\n        //const order = new OrderListItem(2,'',2,'',2,'');\n        //orderList.addOrder(order);\n        //console.log(orderList);\n\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          swapMethods.push(\n            Router.swapCallParameters(trade, {\n              feeOnTransfer: true,\n              allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n              recipient,\n              deadline: deadline\n            })\n          )\n        }\n        break\n      case Version.v1:\n        swapMethods.push(\n          v1SwapArguments(trade, {\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n            recipient,\n            deadline: deadline\n          })\n        )\n        break\n    }\n    // return swapMethods.map(parameters => ({ parameters, contract })), orderListMethods.map(parameters => ({ parameters, contract })), luniClaimMethods.map(parameters => ({ parameters, contract })))\n    return swapMethods.map(parameters => ({ parameters, contract }))\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade, v1Exchange])\n}\n\ninterface ILuniSwapOrder{\n  order:luniOrder,\n  list:OrderList\n}\n\ninterface ILuniSwap{\n  luniOrder:Contract,\n  orderList:Contract,\n  luniClaim:Contract,\n  luniPrice:Contract\n}\n\n\n\nfunction makeOrderCallArgs(\n  trade: Trade | undefined,\n  sender: string | null | undefined,\n  luni: Contract | null,\n  deadline: BigNumber |undefined| null\n):ILuniSwapOrder{\n  \n  const order = new luniOrder(deadline, trade?.route.pairs, trade?.inputAmount, trade?.executionPrice)\n  const list = retrieveOrderList(luni)\n  return <ILuniSwapOrder>{\n    order: order,\n    list: list\n  }\n}\n\nfunction retrieveOrderList(orderListContract:Contract|null){\n  //get the current on chain orderList\n  return new OrderList(orderListContract);\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useOrderListCallback(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n  deadline:number|null\n): { state: OrderListCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { account, chainId, library } = useActiveWeb3React()\n  \n  \n  const swapCalls = useOrderListArgs(trade, allowedSlippage, recipientAddressOrName, deadline)\n  \n  \n  \n\n  //creates an object that holds all of the contracts for luniswap\n  const orderListContract: Contract | null  = useOrderListContract()  \n  const luniClaimContract: Contract | null = useLuniClaimContract()\n  const luniOrderContract: Contract | null = useLuniOrderContract()\n  const luniPriceContract: Contract | null = useLuniPriceContract()\n  const luniSwap:ILuniSwap = <ILuniSwap>{\n    \n    luniOrder: luniOrderContract,\n    orderList: orderListContract,\n    luniClaim: luniClaimContract,\n    luniPrice: luniPriceContract,\n  }\n  console.log(luniSwap);\n  //gets the current on chain order list for luniswap\n  const orderList = retrieveOrderList(luniSwap.orderList);  \n  //create a object for calling luniswap\n  const limitCalls = makeOrderCallArgs(trade, account,orderListContract);\n  console.log(orderList);\n  console.log(limitCalls);\n\n\n\n\n  const addTransaction = useTransactionAdder()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return { state: OrderListCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return { state: OrderListCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\n      } else {\n        return { state: OrderListCallbackState.LOADING, callback: null, error: null }\n      }\n    }\n\n    const tradeVersion = getTradeVersion(trade)\n\n    return {\n      state: OrderListCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\n          //useOrderListArgs and map to contract\n          swapCalls.map(call => {\n            const {\n              parameters: { methodName, args, value },\n              contract\n            } = call\n            //checks to see if any tokens have been sent with the transaction\n            const options = !value || isZero(value) ? {} : { value }\n\n            //estimates the gas usage of the executing contract\n            return contract.estimateGas[methodName](...args, options)\n              .then(gasEstimate => {\n                return {\n                  call,\n                  gasEstimate\n                }\n              })\n              .catch(gasError => {\n                console.debug('Gas estimate failed, trying eth_call to extract error', call)\n\n                return contract.callStatic[methodName](...args, options)\n                  .then(result => {\n                    console.debug('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\n                  })\n                  .catch(callError => {\n                    console.debug('Call threw error', call, callError)\n                    let errorMessage: string\n                    switch (callError.reason) {\n                      case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n                      case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n                        errorMessage =\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\n                        break\n                      default:\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`\n                    }\n                    return { call, error: new Error(errorMessage) }\n                  })\n              })\n          })\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\n        )\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value }\n          },\n          gasEstimate\n        } = successfulEstimation\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value) ? { value, from: account } : { from: account })\n        })\n          .then((response: any) => {\n            const inputSymbol = trade.inputAmount.currency.symbol\n            const outputSymbol = trade.outputAmount.currency.symbol\n            const inputAmount = trade.inputAmount.toSignificant(3)\n            const outputAmount = trade.outputAmount.toSignificant(3)\n\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\n            const withRecipient =\n              recipient === account\n                ? base\n                : `${base} to ${\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\n                      ? shortenAddress(recipientAddressOrName)\n                      : recipientAddressOrName\n                  }`\n\n            const withVersion =\n              tradeVersion === Version.v2 ? withRecipient : `${withRecipient} on ${(tradeVersion as any).toUpperCase()}`\n\n            addTransaction(response, {\n              summary: withVersion\n            })\n\n            return response.hash\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.')\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value)\n              throw new Error(`Swap failed: ${error.message}`)\n            }\n          })\n      },\n      error: null\n    }\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction])\n}\n"]},"metadata":{},"sourceType":"module"}