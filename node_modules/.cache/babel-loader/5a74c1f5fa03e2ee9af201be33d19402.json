{"ast":null,"code":"//import { send } from 'react-ga';\n// import { Pair, Percent, Trade } from '../../node_modules/@uniswap/sdk/dist/entities';\n\n/**\n * Options for producing the arguments to send call to the router.\n */\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport class OrderListItem {\n  constructor(amount, data, deadline, pair, price, sender) {\n    this.data = void 0;\n    this.pair = void 0;\n    this.deadline = void 0;\n    this.price = void 0;\n    this.amount = void 0;\n    this.sender = void 0;\n    this.data = data;\n    this.pair = pair;\n    this.deadline = deadline;\n    this.price = price;\n    this.amount = amount;\n    this.sender = sender;\n    return this;\n  } //hashed string of the limit order\n\n\n}\n/**\n * Represents the Order List provided by LuniSwap\n */\n\nexport class OrderList {\n  constructor(orderListContract) {\n    this.item = void 0;\n    this.orderList = [];\n    //call contract and recursively construct the object from on chain data                           \n    return this;\n  }\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  addOrder(listItem) {\n    this.orderList.push(listItem);\n    return this.orderList;\n  }\n\n}","map":{"version":3,"sources":["/home/devpc/LoonySwap/uniswap-interface/src/data/OrderList.ts"],"names":["OrderListItem","constructor","amount","data","deadline","pair","price","sender","OrderList","orderListContract","item","orderList","addOrder","listItem","push"],"mappings":"AAAA;AAGA;;AAGA;;;;AA8BA;;;AAyBA,OAAO,MAAMA,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,MAAD,EAAgBC,IAAhB,EAA8BC,QAA9B,EAAgDC,IAAhD,EAA8DC,KAA9D,EAA6EC,MAA7E,EAA4F;AAAA,SAWvGJ,IAXuG;AAAA,SAcvGE,IAduG;AAAA,SAiBvGD,QAjBuG;AAAA,SAoBvGE,KApBuG;AAAA,SAsBvGJ,MAtBuG;AAAA,SAwBvGK,MAxBuG;AAEnG,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKE,IAAL,GAAYA,IAAZ;AACA,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKE,KAAL,GAAaA,KAAb;AACA,SAAKJ,MAAL,GAAcA,MAAd;AACA,SAAKK,MAAL,GAAcA,MAAd;AACA,WAAO,IAAP;AACH,GAVsB,CAWvB;;;AAXuB;AA2B3B;;;;AAGA,OAAO,MAAMC,SAAN,CAAe;AAGlBP,EAAAA,WAAW,CAACQ,iBAAD,EAAiC;AAAA,SAFrCC,IAEqC;AAAA,SADrCC,SACqC,GADR,EACQ;AACxC;AACA,WAAO,IAAP;AACH;;AACD;;;;;AAKOC,EAAAA,QAAP,CAAgBC,QAAhB,EAAuC;AACnC,SAAKF,SAAL,CAAeG,IAAf,CAAoBD,QAApB;AACA,WAAO,KAAKF,SAAZ;AACH;;AAfiB","sourcesContent":["//import { send } from 'react-ga';\nimport { Pair, Percent, Trade } from '@uniswap/sdk/dist/entities';\nimport { Contract } from 'ethers';\n// import { Pair, Percent, Trade } from '../../node_modules/@uniswap/sdk/dist/entities';\n\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n    /**\n     * How much the execution price is allowed to move unfavorably from the trade execution price.\n     */\n    allowedSlippage: Percent;\n    /**\n     * How long the swap is valid until it expires, in seconds.\n     * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n     * are generated.\n     */\n    ttl: number;\n    /**\n     * The account that should receive the output of the swap.\n     */\n    recipient: string;\n    /**\n     * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n     */\n    feeOnTransfer?: boolean;\n}\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n    /**\n     * When the transaction expires.\n     * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n     */\n    deadline: number;\n}\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n    /**\n     * The method to call on the Uniswap V2 Router.\n     */\n    methodName: string;\n    /**\n     * The arguments to pass to the method, all hex encoded.\n     */\n    args: (string | string[])[];\n    /**\n     * The amount of wei to send in hex.\n     */\n    value: string;\n}\nexport declare abstract class OrderListBase {\n\n    constructor();\n\n    static orderListParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline):SwapParameters;\n}\n\n\nexport class OrderListItem {\n    constructor(amount:number, data: string, deadline: number, pair: string, price: number, sender: string){\n        \n        this.data = data;\n        this.pair = pair;\n        this.deadline = deadline;\n        this.price = price;\n        this.amount = amount;\n        this.sender = sender;\n        return this;\n    }\n    //hashed string of the limit order\n    data: string| undefined;\n\n    //token pair for price\n    pair: Pair| undefined| string;\n\n    //expiry for limit order\n    deadline: number | undefined;\n\n    //price in wei of the limit order\n    price: number| undefined;\n    //amount of tokens to buy/sell\n    amount: number| undefined;\n    // address of sender of order\n    sender: string| undefined;\n}\n/**\n * Represents the Order List provided by LuniSwap\n */\nexport class OrderList{\n    public item!: OrderListItem; \n    public orderList: OrderListItem[] = [];\n    constructor(orderListContract:Contract|null){      \n        //call contract and recursively construct the object from on chain data                           \n        return this;\n    };\n    /**\n     * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n     * @param trade to produce call parameters for\n     * @param options options for the call parameters\n     */\n    public addOrder(listItem:OrderListItem){\n        this.orderList.push(listItem);\n        return(this.orderList);\n    };\n    // public removeOrder(listItem:OrderListItem){\n    //     this.orderList.(this.orderList.indexOf(listItem));\n    //     return(this.orderList);\n    // };\n}\n"]},"metadata":{},"sourceType":"module"}