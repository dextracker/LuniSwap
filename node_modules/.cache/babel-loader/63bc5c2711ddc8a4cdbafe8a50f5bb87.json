{"ast":null,"code":"import { MaxUint256 } from '@ethersproject/constants';\nimport { TokenAmount, ETHER } from '@uniswap/sdk';\nimport { useCallback, useMemo } from 'react';\nimport { ROUTER_ADDRESS } from '../constants';\nimport { useTokenAllowance } from '../data/Allowances';\nimport { getTradeVersion, useV1TradeExchangeAddress } from '../data/V1';\nimport { Field } from '../state/swap/actions';\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks';\nimport { computeSlippageAdjustedAmounts } from '../utils/prices';\nimport { calculateGasMargin } from '../utils';\nimport { useTokenContract, useOrderListContract, useLuniSwapContract, useLuniClaimContract, useLuniPriceContract } from './useContract';\nimport { useActiveWeb3React } from './index';\nimport { Version } from './useToggledVersion';\nlet i = 1;\nexport let ApprovalState; // returns a variable indicating the state of the approval and a function which approves if necessary or early returns\n\n(function (ApprovalState) {\n  ApprovalState[ApprovalState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  ApprovalState[ApprovalState[\"NOT_APPROVED\"] = 1] = \"NOT_APPROVED\";\n  ApprovalState[ApprovalState[\"PENDING\"] = 2] = \"PENDING\";\n  ApprovalState[ApprovalState[\"APPROVED\"] = 3] = \"APPROVED\";\n})(ApprovalState || (ApprovalState = {}));\n\nexport function useApproveCallback(amountToApprove, spender) {\n  const {\n    account\n  } = useActiveWeb3React();\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined;\n  const currentAllowance = useTokenAllowance(token, account !== null && account !== void 0 ? account : undefined, spender);\n  const pendingApproval = useHasPendingApproval(token === null || token === void 0 ? void 0 : token.address, spender); // check the current approval status\n\n  const approvalState = useMemo(() => {\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN;\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED; // we might not have enough data to know whether or not we need to approve\n\n    if (!currentAllowance) return ApprovalState.UNKNOWN; // amountToApprove will be defined if currentAllowance is\n\n    return currentAllowance.lessThan(amountToApprove) ? pendingApproval ? ApprovalState.PENDING : ApprovalState.NOT_APPROVED : ApprovalState.APPROVED;\n  }, [amountToApprove, currentAllowance, pendingApproval, spender]); //gets token contract from useContracts.ts\n  //this is how you call the contract and get the methods.\n\n  const orderListContract = useOrderListContract();\n  const luniSwapContract = useLuniSwapContract();\n  const luniClaimContract = useLuniClaimContract();\n  const luniPriceContract = useLuniPriceContract();\n\n  if (i === 1) {\n    console.log(orderListContract);\n    console.log(luniSwapContract);\n    console.log(luniClaimContract);\n    console.log(luniPriceContract);\n    i += 1;\n  }\n\n  const tokenContract = useTokenContract(token === null || token === void 0 ? void 0 : token.address);\n  const addTransaction = useTransactionAdder();\n  const approve = useCallback(async () => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    if (!token) {\n      console.error('no token');\n      return;\n    }\n\n    if (!tokenContract) {\n      console.error('tokenContract is null');\n      return;\n    }\n\n    if (!luniSwapContract) {\n      console.error('luniSwapContract is null');\n      return;\n    }\n\n    if (!orderListContract) {\n      console.error('orderListContract is null');\n      return;\n    }\n\n    if (!amountToApprove) {\n      console.error('missing amount to approve');\n      return;\n    }\n\n    if (!spender) {\n      console.error('no spender');\n      return;\n    }\n\n    let useExact = false;\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true;\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString());\n    });\n    return tokenContract.approve(spender, useExact ? amountToApprove.raw.toString() : MaxUint256, {\n      gasLimit: calculateGasMargin(estimatedGas)\n    }).then(response => {\n      addTransaction(response, {\n        summary: 'Approve ' + amountToApprove.currency.symbol,\n        approval: {\n          tokenAddress: token.address,\n          spender: spender\n        }\n      });\n    }).catch(error => {\n      console.debug('Failed to approve token', error);\n      throw error;\n    });\n  }, [approvalState, token, tokenContract, orderListContract, luniSwapContract, amountToApprove, spender, addTransaction]);\n  return [approvalState, approve];\n} // wraps useApproveCallback in the context of a swap\n\nexport function useApproveCallbackFromTrade(trade, allowedSlippage = 0) {\n  const amountToApprove = useMemo(() => trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined, [trade, allowedSlippage]);\n  const tradeIsV1 = getTradeVersion(trade) === Version.v1;\n  const v1ExchangeAddress = useV1TradeExchangeAddress(trade);\n  return useApproveCallback(amountToApprove, tradeIsV1 ? v1ExchangeAddress : ROUTER_ADDRESS);\n}","map":{"version":3,"sources":["/home/devpc/LoonySwap/uniswap-interface/src/hooks/useApproveCallback.ts"],"names":["MaxUint256","TokenAmount","ETHER","useCallback","useMemo","ROUTER_ADDRESS","useTokenAllowance","getTradeVersion","useV1TradeExchangeAddress","Field","useTransactionAdder","useHasPendingApproval","computeSlippageAdjustedAmounts","calculateGasMargin","useTokenContract","useOrderListContract","useLuniSwapContract","useLuniClaimContract","useLuniPriceContract","useActiveWeb3React","Version","i","ApprovalState","useApproveCallback","amountToApprove","spender","account","token","undefined","currentAllowance","pendingApproval","address","approvalState","UNKNOWN","currency","APPROVED","lessThan","PENDING","NOT_APPROVED","orderListContract","luniSwapContract","luniClaimContract","luniPriceContract","console","log","tokenContract","addTransaction","approve","error","useExact","estimatedGas","estimateGas","catch","raw","toString","gasLimit","then","response","summary","symbol","approval","tokenAddress","debug","useApproveCallbackFromTrade","trade","allowedSlippage","INPUT","tradeIsV1","v1","v1ExchangeAddress"],"mappings":"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","sourcesContent":["import { MaxUint256 } from '@ethersproject/constants'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Trade, TokenAmount, CurrencyAmount, ETHER } from '@uniswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport { ROUTER_ADDRESS } from '../constants'\nimport { useTokenAllowance } from '../data/Allowances'\nimport { getTradeVersion, useV1TradeExchangeAddress } from '../data/V1'\nimport { Field } from '../state/swap/actions'\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks'\nimport { computeSlippageAdjustedAmounts } from '../utils/prices'\nimport { calculateGasMargin } from '../utils'\nimport { useTokenContract, useOrderListContract, useLuniSwapContract, useLuniClaimContract, useLuniPriceContract } from './useContract'\nimport { useActiveWeb3React } from './index'\nimport { Version } from './useToggledVersion'\nlet i = 1;\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nexport function useApproveCallback(\n  amountToApprove?: CurrencyAmount,\n  spender?: string\n): [ApprovalState, () => Promise<void>] {\n  const { account } = useActiveWeb3React()\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined\n  const currentAllowance = useTokenAllowance(token, account ?? undefined, spender)\n  const pendingApproval = useHasPendingApproval(token?.address, spender)\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lessThan(amountToApprove)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED\n  }, [amountToApprove, currentAllowance, pendingApproval, spender])\n\n  //gets token contract from useContracts.ts\n  //this is how you call the contract and get the methods.\n  const orderListContract = useOrderListContract();\n  const luniSwapContract = useLuniSwapContract();\n  const luniClaimContract = useLuniClaimContract();\n  const luniPriceContract = useLuniPriceContract();\n  if(i===1){\n    console.log(orderListContract);\n    console.log(luniSwapContract);\n    console.log(luniClaimContract);\n    console.log(luniPriceContract);\n    i+=1;\n  }\n  const tokenContract = useTokenContract(token?.address)\n  const addTransaction = useTransactionAdder()\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily')\n      return\n    }\n    if (!token) {\n      console.error('no token')\n      return\n    }\n\n    if (!tokenContract) {\n      console.error('tokenContract is null')\n      return\n    }\n\n    if(!luniSwapContract){\n      console.error('luniSwapContract is null')\n      return\n    }\n    if(!orderListContract){\n      console.error('orderListContract is null')\n      return\n    }\n\n\n    if (!amountToApprove) {\n      console.error('missing amount to approve')\n      return\n    }\n\n    if (!spender) {\n      console.error('no spender')\n      return\n    }\n\n    let useExact = false\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString())\n    })\n\n    return tokenContract\n      .approve(spender, useExact ? amountToApprove.raw.toString() : MaxUint256, {\n        gasLimit: calculateGasMargin(estimatedGas)\n      })\n      .then((response: TransactionResponse) => {\n        addTransaction(response, {\n          summary: 'Approve ' + amountToApprove.currency.symbol,\n          approval: { tokenAddress: token.address, spender: spender }\n        })\n      })\n      .catch((error: Error) => {\n        console.debug('Failed to approve token', error)\n        throw error\n      })\n  }, [approvalState, token, tokenContract,orderListContract,luniSwapContract, amountToApprove, spender, addTransaction])\n\n  return [approvalState, approve]\n}\n\n// wraps useApproveCallback in the context of a swap\nexport function useApproveCallbackFromTrade(trade?: Trade, allowedSlippage = 0) {\n  const amountToApprove = useMemo(\n    () => (trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined),\n    [trade, allowedSlippage]\n  )\n  const tradeIsV1 = getTradeVersion(trade) === Version.v1\n  const v1ExchangeAddress = useV1TradeExchangeAddress(trade)\n  return useApproveCallback(amountToApprove, tradeIsV1 ? v1ExchangeAddress : ROUTER_ADDRESS)\n}\n"]},"metadata":{},"sourceType":"module"}