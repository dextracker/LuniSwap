{"ast":null,"code":"import { MaxUint256 } from '@ethersproject/constants';\nimport { TokenAmount, ETHER } from '@uniswap/sdk';\nimport { useCallback, useMemo } from 'react';\nimport { ROUTER_ADDRESS } from '../constants';\nimport { useTokenAllowance } from '../data/Allowances';\nimport { getTradeVersion, useV1TradeExchangeAddress } from '../data/V1';\nimport { Field } from '../state/swap/actions';\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks';\nimport { computeSlippageAdjustedAmounts } from '../utils/prices';\nimport { calculateGasMargin } from '../utils';\nimport { useTokenContract, useOrderListContract, useLuniSwapContract, useLuniClaimContract, useLuniPriceContract } from './useContract';\nimport { useActiveWeb3React } from './index';\nimport { Version } from './useToggledVersion';\nlet i = 0;\nexport let ApprovalState; // returns a variable indicating the state of the approval and a function which approves if necessary or early returns\n\n(function (ApprovalState) {\n  ApprovalState[ApprovalState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  ApprovalState[ApprovalState[\"NOT_APPROVED\"] = 1] = \"NOT_APPROVED\";\n  ApprovalState[ApprovalState[\"PENDING\"] = 2] = \"PENDING\";\n  ApprovalState[ApprovalState[\"APPROVED\"] = 3] = \"APPROVED\";\n})(ApprovalState || (ApprovalState = {}));\n\nexport function useApproveCallback(amountToApprove, spender) {\n  const {\n    account\n  } = useActiveWeb3React();\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined;\n  const currentAllowance = useTokenAllowance(token, account !== null && account !== void 0 ? account : undefined, spender);\n  const pendingApproval = useHasPendingApproval(token === null || token === void 0 ? void 0 : token.address, spender); // check the current approval status\n\n  const approvalState = useMemo(() => {\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN;\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED; // we might not have enough data to know whether or not we need to approve\n\n    if (!currentAllowance) return ApprovalState.UNKNOWN; // amountToApprove will be defined if currentAllowance is\n\n    return currentAllowance.lessThan(amountToApprove) ? pendingApproval ? ApprovalState.PENDING : ApprovalState.NOT_APPROVED : ApprovalState.APPROVED;\n  }, [amountToApprove, currentAllowance, pendingApproval, spender]); //gets token contract from useContracts.ts\n  //this is how you call the contract and get the methods.\n\n  const orderListContract = useOrderListContract();\n  const luniSwapContract = useLuniSwapContract();\n  const luniClaimContract = useLuniClaimContract();\n  const luniPriceContract = useLuniPriceContract();\n\n  if (i === 0) {\n    console.log(orderListContract);\n    console.log(luniSwapContract);\n    console.log(luniClaimContract);\n    console.log(luniPriceContract);\n    i += 1;\n  }\n\n  let useExact = false;\n\n  const gasResults = async () => {\n    let luniSwapGas = await (luniSwapContract === null || luniSwapContract === void 0 ? void 0 : luniSwapContract.estimateGas.getEstimatedEthForDai(MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true;\n      return luniSwapContract.estimateGas.getEstimatedETHForDAI(MaxUint256);\n    }));\n    let luniPriceGas = await (luniPriceContract === null || luniPriceContract === void 0 ? void 0 : luniPriceContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true;\n      return luniPriceContract.estimateGas.approve(spender, amountToApprove === null || amountToApprove === void 0 ? void 0 : amountToApprove.raw.toString());\n    }));\n    let orderListGas = await (orderListContract === null || orderListContract === void 0 ? void 0 : orderListContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true;\n      return orderListContract === null || orderListContract === void 0 ? void 0 : orderListContract.estimateGas.approve(spender, amountToApprove === null || amountToApprove === void 0 ? void 0 : amountToApprove.raw.toString());\n    }));\n    let luniClaimGas = await (luniClaimContract === null || luniClaimContract === void 0 ? void 0 : luniClaimContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true;\n      return luniClaimContract.estimateGas.addHead(spender, amountToApprove === null || amountToApprove === void 0 ? void 0 : amountToApprove.raw.toString());\n    }));\n    console.log(luniSwapGas);\n    console.log(luniPriceGas);\n    console.log(orderListGas);\n    console.log(luniClaimGas);\n  };\n\n  console.log(gasResults);\n  const tokenContract = useTokenContract(token === null || token === void 0 ? void 0 : token.address);\n  const addTransaction = useTransactionAdder();\n  const approve = useCallback(async () => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    if (!token) {\n      console.error('no token');\n      return;\n    }\n\n    if (!tokenContract) {\n      console.error('tokenContract is null');\n      return;\n    }\n\n    if (!luniSwapContract) {\n      console.error('luniSwapContract is null');\n      return;\n    }\n\n    if (!orderListContract) {\n      console.error('orderListContract is null');\n      return;\n    }\n\n    if (!amountToApprove) {\n      console.error('missing amount to approve');\n      return;\n    }\n\n    if (!spender) {\n      console.error('no spender');\n      return;\n    }\n\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true;\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString());\n    });\n    return tokenContract.approve(spender, useExact ? amountToApprove.raw.toString() : MaxUint256, {\n      gasLimit: calculateGasMargin(estimatedGas)\n    }).then(response => {\n      addTransaction(response, {\n        summary: 'Approve ' + amountToApprove.currency.symbol,\n        approval: {\n          tokenAddress: token.address,\n          spender: spender\n        }\n      });\n    }).catch(error => {\n      console.debug('Failed to approve token', error);\n      throw error;\n    });\n  }, [approvalState, token, tokenContract, orderListContract, luniSwapContract, luniClaimContract, luniPriceContract, amountToApprove, spender, addTransaction]);\n  return [approvalState, approve];\n} // wraps useApproveCallback in the context of a swap\n\nexport function useApproveCallbackFromTrade(trade, allowedSlippage = 0) {\n  const amountToApprove = useMemo(() => trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined, [trade, allowedSlippage]);\n  const tradeIsV1 = getTradeVersion(trade) === Version.v1;\n  const v1ExchangeAddress = useV1TradeExchangeAddress(trade);\n  return useApproveCallback(amountToApprove, tradeIsV1 ? v1ExchangeAddress : ROUTER_ADDRESS);\n}","map":{"version":3,"sources":["/home/devpc/LoonySwap/uniswap-interface/src/hooks/useApproveCallback.ts"],"names":["MaxUint256","TokenAmount","ETHER","useCallback","useMemo","ROUTER_ADDRESS","useTokenAllowance","getTradeVersion","useV1TradeExchangeAddress","Field","useTransactionAdder","useHasPendingApproval","computeSlippageAdjustedAmounts","calculateGasMargin","useTokenContract","useOrderListContract","useLuniSwapContract","useLuniClaimContract","useLuniPriceContract","useActiveWeb3React","Version","i","ApprovalState","useApproveCallback","amountToApprove","spender","account","token","undefined","currentAllowance","pendingApproval","address","approvalState","UNKNOWN","currency","APPROVED","lessThan","PENDING","NOT_APPROVED","orderListContract","luniSwapContract","luniClaimContract","luniPriceContract","console","log","useExact","gasResults","luniSwapGas","estimateGas","getEstimatedEthForDai","catch","getEstimatedETHForDAI","luniPriceGas","approve","raw","toString","orderListGas","luniClaimGas","addHead","tokenContract","addTransaction","error","estimatedGas","gasLimit","then","response","summary","symbol","approval","tokenAddress","debug","useApproveCallbackFromTrade","trade","allowedSlippage","INPUT","tradeIsV1","v1","v1ExchangeAddress"],"mappings":"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","sourcesContent":["import { MaxUint256 } from '@ethersproject/constants'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Trade, TokenAmount, CurrencyAmount, ETHER } from '@uniswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport { ROUTER_ADDRESS } from '../constants'\nimport { useTokenAllowance } from '../data/Allowances'\nimport { getTradeVersion, useV1TradeExchangeAddress } from '../data/V1'\nimport { Field } from '../state/swap/actions'\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks'\nimport { computeSlippageAdjustedAmounts } from '../utils/prices'\nimport { calculateGasMargin } from '../utils'\nimport { useTokenContract, useOrderListContract, useLuniSwapContract, useLuniClaimContract, useLuniPriceContract } from './useContract'\nimport { useActiveWeb3React } from './index'\nimport { Version } from './useToggledVersion'\nlet i = 0;\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nexport function useApproveCallback(\n  amountToApprove?: CurrencyAmount,\n  spender?: string\n): [ApprovalState, () => Promise<void>] {\n  const { account } = useActiveWeb3React()\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined\n  const currentAllowance = useTokenAllowance(token, account ?? undefined, spender)\n  const pendingApproval = useHasPendingApproval(token?.address, spender)\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lessThan(amountToApprove)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED\n  }, [amountToApprove, currentAllowance, pendingApproval, spender])\n\n  //gets token contract from useContracts.ts\n  //this is how you call the contract and get the methods.\n  const orderListContract = useOrderListContract();\n  const luniSwapContract = useLuniSwapContract();\n  const luniClaimContract = useLuniClaimContract();\n  const luniPriceContract = useLuniPriceContract();\n  if(i===0){\n    console.log(orderListContract);\n    console.log(luniSwapContract);\n    console.log(luniClaimContract);\n    console.log(luniPriceContract);\n    i+=1;\n  }\n\n\n  let useExact = false\n  const gasResults = async() =>{\n\n  let luniSwapGas = await luniSwapContract?.estimateGas.getEstimatedEthForDai(MaxUint256).catch(() => {\n    // general fallback for tokens who restrict approval amounts\n    useExact = true\n    return luniSwapContract.estimateGas.getEstimatedETHForDAI(MaxUint256)\n  })\n\n  let luniPriceGas = await luniPriceContract?.estimateGas.approve(spender, MaxUint256).catch(() => {\n    // general fallback for tokens who restrict approval amounts\n    useExact = true\n    return luniPriceContract.estimateGas.approve(spender, amountToApprove?.raw.toString())\n  })\n  let orderListGas = await orderListContract?.estimateGas.approve(spender, MaxUint256).catch(() => {\n    // general fallback for tokens who restrict approval amounts\n    useExact = true\n    return orderListContract?.estimateGas.approve(spender, amountToApprove?.raw.toString())\n  })\n  let luniClaimGas = await luniClaimContract?.estimateGas.approve(spender, MaxUint256).catch(() => {\n    // general fallback for tokens who restrict approval amounts\n    useExact = true\n    return luniClaimContract.estimateGas.addHead(spender, amountToApprove?.raw.toString())\n  })\n  console.log(luniSwapGas);\n    console.log(luniPriceGas);\n    console.log(orderListGas);\n    console.log(luniClaimGas);\n  }\n  console.log(gasResults);\n  \n  \n\n    \n  \n\n\n  const tokenContract = useTokenContract(token?.address)\n  const addTransaction = useTransactionAdder()\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily')\n      return\n    }\n    if (!token) {\n      console.error('no token')\n      return\n    }\n\n    if (!tokenContract) {\n      console.error('tokenContract is null')\n      return\n    }\n\n    if(!luniSwapContract){\n      console.error('luniSwapContract is null')\n      return\n    }\n    if(!orderListContract){\n      console.error('orderListContract is null')\n      return\n    }\n\n\n    if (!amountToApprove) {\n      console.error('missing amount to approve')\n      return\n    }\n\n    if (!spender) {\n      console.error('no spender')\n      return\n    }\n\n    \n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString())\n    })\n\n    \n\n\n\n    return tokenContract\n      .approve(spender, useExact ? amountToApprove.raw.toString() : MaxUint256, {\n        gasLimit: calculateGasMargin(estimatedGas)\n      })\n      .then((response: TransactionResponse) => {\n        addTransaction(response, {\n          summary: 'Approve ' + amountToApprove.currency.symbol,\n          approval: { tokenAddress: token.address, spender: spender }\n        })\n      })\n      .catch((error: Error) => {\n        console.debug('Failed to approve token', error)\n        throw error\n      })\n  }, [approvalState, token, tokenContract,orderListContract,luniSwapContract,luniClaimContract,luniPriceContract, amountToApprove, spender, addTransaction])\n\n  return [approvalState, approve]\n}\n\n// wraps useApproveCallback in the context of a swap\nexport function useApproveCallbackFromTrade(trade?: Trade, allowedSlippage = 0) {\n  const amountToApprove = useMemo(\n    () => (trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined),\n    [trade, allowedSlippage]\n  )\n  const tradeIsV1 = getTradeVersion(trade) === Version.v1\n  const v1ExchangeAddress = useV1TradeExchangeAddress(trade)\n  return useApproveCallback(amountToApprove, tradeIsV1 ? v1ExchangeAddress : ROUTER_ADDRESS)\n}\n"]},"metadata":{},"sourceType":"module"}